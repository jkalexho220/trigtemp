<?xml version = "1.0"?>
<trigger version="2">

<!-- TT Loader - Public Release - 5 september 2009 -->
<!-- version 2.0.1 -->

<Conditions>
	<Condition name="$$22289$$Always">
		<Expression>true</Expression>
	</Condition>
   
   <!-- ************ Vector QV Conditions ************ -->
   
   <Condition name="Distance to QV Vector">
      <Param name="SrcObject" dispName="$$22295$$Source Units" VarType="unit">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="Op" dispName="$$22297$$Operator" VarType="operator">==</Param>
      <Param name="Dist" dispName="$$22298$$Distance" VarType="float">0</Param>
      <Command>trUnitSelectClear();</Command>
      <Command loop="" loopParm="SrcObject">trUnitSelect("%SrcObject%");</Command>
      <Expression>trUnitDistanceToPoint(trVectorQuestVarGetX("%V%"),trVectorQuestVarGetY("%V%"),trVectorQuestVarGetZ("%V%")) %Op% %Dist%</Expression>
   </Condition>
   
   <Condition name="Army Distance to QV Vector">
      <Param name="SrcArmy" dispName="$$22348$$Army" VarType="group">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="Op" dispName="$$22297$$Operator" VarType="operator">==</Param>
      <Param name="Dist" dispName="$$22298$$Distance" VarType="float">0</Param>
      <Command>trArmySelect("%SrcArmy%");</Command>
      <Expression>trUnitDistanceToPoint(trVectorQuestVarGetX("%V%"),trVectorQuestVarGetY("%V%"),trVectorQuestVarGetZ("%V%")) %Op% %Dist%</Expression>
   </Condition>
   
   <!-- *********** String QV Conditions ************* -->
   
	<Condition name="Quest String Check">
		<Param name="QVString" dispName="QV String" VarType="string">S1</Param>
		<Param name="CheckString" dispName="Equals" VarType="string">Text to check</Param>
		<Expression>trStringQuestVarGet("%QVString%") == "%CheckString%"</Expression>
	</Condition>
	
	<Condition name="Quest String Equals">
		<Param name="QVString" dispName="QV String" VarType="string">S1</Param>
		<Param name="QVString2" dispName="QV String" VarType="string">S2</Param>
		<Expression>trStringQuestVarGet("%QVString%") == trStringQuestVarGet("%QVString2%")</Expression>
	</Condition>
   
   <!-- ************ Army QV Conditions ************** -->
   
   <Condition name="Quest Army Player Check">
		<Param name="QVAName" dispName="$$23952$$Var Name" VarType="string">QVA1</Param>
		<Param name="Op" dispName="$$22297$$Operator" VarType="operator">==</Param>
		<Param name="PlayerID" dispName="$$22444$$From Player" VarType="long">0</Param>
		<Expression>trQuestVarArmyGetPlayerID("%QVAName%") %Op% %PlayerID%</Expression>
	</Condition>
	
	<Condition name="Quest Army Check">
		<Param name="QVAName" dispName="$$23952$$Var Name" VarType="string">QVA1</Param>
		<Param name="Army" dispName="Army" VarType="group">default</Param>
		<Expression>trQuestVarArmyGet("%QVAName%") == "%Army%"</Expression>
	</Condition>
	
   <!-- ********** Quest Array Conditions ************ -->
   
   <Condition name="Quest Array Value Compare">
		<Param name="Array" dispName="Array Name" VarType="string">Array 1</Param>
		<Param name="X" dispName="Pos X" varType="long">1</Param>
	  	<Param name="Y" dispName="Pos Y" varType="long">1</Param>
		<Param name="Op" dispName="$$22297$$Operator" VarType="operator">==</Param>
		<Param name="Value" dispName="$$23859$$Value" VarType="float">1.0</Param>
		<Expression>xsArrayGetByName("%Array%", %X%, %Y%) %Op% %Value%</Expression>
	</Condition>
	
	<Condition name="Quest Array Value Compare 2">
		<Param name="Array1" dispName="Array Name 1" VarType="string">Array 1</Param>
		<Param name="A1" dispName="X1, Y1" varType="string">1, 2</Param>
		<Param name="Op" dispName="$$22297$$Operator" VarType="operator">==</Param>
		<Param name="Array2" dispName="Array Name 2" VarType="string">Array 2</Param>
	  	<Param name="A2" dispName="X2, Y2" varType="string">3, 4</Param>
		<Expression>xsArrayGetByName("%Array1%", %A1%) %Op% xsArrayGetByName("%Array2%", %A2%)</Expression>
	</Condition>
	
	<Condition name="Quest Array Equals">
		<Param name="Array1" dispName="Array Name 1" VarType="string">Array 1</Param>
		<Param name="Array2" dispName="Array Name 2" VarType="string">Array 2</Param>
		<Expression>xsArrayEqual("%Array1%", "%Array2%")</Expression>
	</Condition>

</Conditions>

<Effects>

	<Effect name="$$22355$$SetIdleProcessing">
		<Param name="IdleProc" dispName="$$22356$$Process Idle:" varType="bool">true</Param>
		<Command>trSetUnitIdleProcessing(%IdleProc%);</Command>
	</Effect>
   
	<!-- ********* Vector Quest Var Effects *********** -->
   
   <Effect name="Quest Var Vector Set">
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="LocationLocationLocation" dispName="" varType="area">-1, -1, -1</Param>
      <Param name="R" dispName="Round" varType="bool">false</Param>
      <Command>if(%R%) { trVectorQuestVarSet("%VQVName%", xsVectorSet(%LocationLocationLocation%));</Command>
      <Command>for(a=0; >1){}for(b=0; >1){}for(c=0; >1){} a = xsVectorGetX(trVectorQuestVarGet("%VQVName%"));b = xsVectorGetY(trVectorQuestVarGet("%VQVName%"));c = xsVectorGetZ(trVectorQuestVarGet("%VQVName%"));</Command>
      <Command>trVectorQuestVarSet("%VQVName%",xsVectorSet(a,b,c));}</Command>
      <Command>else {trVectorQuestVarSet("%VQVName%", xsVectorSet(%LocationLocationLocation%));}</Command>
   </Effect>
   
   <Effect name="Quest Var Vector Modify">
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="Oper" dispName="$$23955$$Operator" VarType="string">+</Param>
      <Param name="X" dispName="Vector X" VarType="float">0</Param>
      <Param name="Y" dispName="Vector Y" VarType="float">0</Param>
      <Param name="Z" dispName="Vector Z" VarType="float">0</Param>
      <Param name="R" dispName="Round" varType="bool">false</Param>
      <Command>trVectorQuestVarSet("%VQVName%", xsVectorSet(trVectorQuestVarGetX("%VQVName%") %Oper% %X%,trVectorQuestVarGetY("%VQVName%") %Oper% %Y%,trVectorQuestVarGetZ("%VQVName%") %Oper% %Z%));</Command>
      <Command>if(%R%) { for(a=0; >1){}for(b=0; >1){}for(c=0; >1){}</Command>
      <Command>a = trVectorQuestVarGetX("%VQVName%");b = trVectorQuestVarGetY("%VQVName%");c = trVectorQuestVarGetZ("%VQVName%");</Command>
      <Command>trVectorQuestVarSet("%VQVName%",xsVectorSet(a,b,c));}</Command>
   </Effect>
   
   <Effect name="Quest Var Vector Round Up">
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Command>for(a=0; >1){}for(b=0; >1){}for(c=0; >1){}</Command>
      <Command>a = trVectorQuestVarGetX("%VQVName%");b = trVectorQuestVarGetY("%VQVName%");c = trVectorQuestVarGetZ("%VQVName%");</Command>
      <Command>trVectorQuestVarSet("%VQVName%",xsVectorSet(a,b,c));</Command>
   </Effect>
   
   <Effect name="Quest Var Vector Modify 2">
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="Oper" dispName="$$23955$$Operator" VarType="string">+</Param>
      <Param name="VQVName2" dispName="Vector Name 2" VarType="string">V1</Param>
      <Param name="R" dispName="Round" varType="bool">false</Param>
      <Command>trVectorQuestVarSet("%VQVName%", trVectorQuestVarGet("%VQVName%") %Oper% trVectorQuestVarGet("%VQVName2%"));</Command>
      <Command>if(%R%) { for(a=0; >1){}for(b=0; >1){}for(c=0; >1){}</Command>
      <Command>a = trVectorQuestVarGetX("%VQVName%");b = trVectorQuestVarGetY("%VQVName%");c = trVectorQuestVarGetZ("%VQVName%");</Command>
      <Command>trVectorQuestVarSet("%VQVName%",xsVectorSet(a,b,c));}</Command>
   </Effect>
   
   <Effect name="Quest Var Vector Copy">
      <Param name="VQVName2" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="VQVName" dispName="From Vector" VarType="string">V2</Param>
      <Command>trVectorQuestVarSet("%VQVName2%", trVectorQuestVarGet("%VQVName%"));</Command>
   </Effect>
   
   <Effect name="Quest Var Vector Echo">
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Command>trVectorQuestVarEcho("%VQVName%");</Command>
   </Effect>
   
   	<!-- ********* String Quest Var Effects ********** -->

   <Effect name="Quest String Set">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Param name="QSValue" dispName="Text" VarType="string"></Param>
      <Command>trStringQuestVarSet("%QSName%", "%QSValue%");</Command>
   </Effect>
	
   <Effect name="Quest String Set SubString">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Param name="Start" dispName="Starting Pos" VarType="long">0</Param>
      <Param name="N" dispName="Nr of Characters" VarType="long">0</Param>
      <Param name="Up" dispName="Uppercase" VarType="bool">false</Param>
      <Param name="QSName2" dispName="String Name" VarType="string">S2</Param>
      <Command>if (%Up%) { trStringQuestVarSet("%QSName2%", String_toUpperCase(String_substr(trStringQuestVarGet("%QSName%"), %Start%, %N%))); }</Command>
      <Command>else { trStringQuestVarSet("%QSName2%", String_substr(trStringQuestVarGet("%QSName%"), %Start%, %N%)); }</Command>
   </Effect>
	
   <Effect name="Quest String Add Prefix">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Param name="QSValue" dispName="Text" VarType="string"></Param>
      <Command>trStringQuestVarSet("%QSName%", "%QSValue%"+ trStringQuestVarGet("%QSName%"));</Command>
   </Effect>

   <Effect name="Quest String Add Suffix">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Param name="QSValue" dispName="Text" VarType="string"></Param>
      <Command>trStringQuestVarSet("%QSName%", trStringQuestVarGet("%QSName%") + "%QSValue%");</Command>
   </Effect>

   <Effect name="Quest String Copy">
      <Param name="QSName2" dispName="String Name" VarType="string">S1</Param>
      <Param name="QSName" dispName="From String" VarType="string">S2</Param>
      <Command>trStringQuestVarSet("%QSName2%", trStringQuestVarGet("%QSName%"));</Command>
   </Effect>

   <Effect name="Send Chat With QV String">
	   <Param name="PlayerID" dispName="$$22444$$From Player" VarType="long">0</Param>
	   <Param name="Message" dispName="$$20056$$Message" VarType="stringid">default</Param>
       <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
	   <Param name="Message2" dispName="$$20056$$Message" VarType="stringid">default</Param>
      <Command>trChatSend(%PlayerID%,"%Message%"+trStringQuestVarGet("%QSName%")+"%Message2%");</Command>
   </Effect>

   <Effect name="Send Chat With QV String 2">
	   <Param name="PlayerID" dispName="$$22444$$From Player" VarType="long">0</Param>
	   <Param name="Message" dispName="$$20056$$Message" VarType="stringid">default</Param>
       <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
	   <Param name="Message2" dispName="$$20056$$Message" VarType="stringid">default</Param>
       <Param name="QSName2" dispName="String Name" VarType="string">S2</Param>
	   <Param name="Message3" dispName="$$20056$$Message" VarType="stringid">default</Param>
      <Command>trChatSend(%PlayerID%,"%Message%"+trStringQuestVarGet("%QSName%")+"%Message2%"+trStringQuestVarGet("%QSName2%")+"%Message3%");</Command>
   </Effect>

   <Effect name="Quest String Echo">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Command>trStringQuestVarEcho("%QSName%");</Command>
   </Effect>
  	
	<Effect name="QV Set String Number">
      <Param name="QSName" dispName="String Name" VarType="string">S1</Param>
      <Param name="QuestVar" dispName="$$23952$$Var Name" varType="string">QV1</Param>
      <Command>trQuestVarSet("%QuestVar%", String_parseFloat(trStringQuestVarGet("%QSName%")));</Command>
	</Effect>

   	<!-- ************* Army QV Effects **************** -->
   	
   	<Effect name="Quest Army Set">
    	<Param name="QVA" dispName="QV Army" VarType="string">QVA1</Param>
    	<Param name="Army" dispName="Army" VarType="group">default</Param>
    	<Command>trQuestVarArmySet("%QVA%", vector(%Army%,-1));</Command>
   	</Effect>
   	
   	<Effect name="Quest Army Echo">
    	<Param name="QVA" dispName="QV Army" VarType="string">QVA1</Param>
    	<Command>trQuestVarArmyEcho("%QVA%");</Command>
   	</Effect>
   	
   	<!-- *********** Quest Array Effects ************** -->
   	
   	<Effect name="Quest Array Create">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="SizeX" dispName="Size X" varType="long">5</Param>
	  <Param name="SizeY" dispName="Size Y" varType="long">1</Param>
	  <Param name="val" dispName="Default Value" varType="long">-1.0</Param>
      <Command>xsArrayCreate("%AName%", %SizeX%, %SizeY%, %val%);</Command>
	</Effect>
	
	<Effect name="Quest Array Set">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="val" dispName="Value" varType="float">0.0</Param>
	  <Param name="X" dispName="Pos X" varType="long">1</Param>
	  <Param name="Y" dispName="Pos Y" varType="long">1</Param>
      <Command>xsArraySetByName("%AName%", %val%, %X%, %Y%);</Command>
	</Effect>
	
	<Effect name="Quest Array Set QV">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      <Param name="QuestVar" dispName="$$23952$$Var Name" varType="string">QV1</Param>
      <Param name="X" dispName="Pos X" varType="long">1</Param>
      <Param name="Y" dispName="Pos Y" varType="long">1</Param>
      <Command>xsArraySetByName("%AName%", trQuestVarGet("%QuestVar%"), %X%, %Y%);</Command>
	</Effect>

	<Effect name="Quest Array Set Row">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="val" dispName="Value" varType="float">0.0</Param>
	  <Param name="Y" dispName="Row" varType="long">1</Param>
      <Command>for(i=xsArrayGetSizeXByName("%AName%");>0)</Command>
      <Command>   xsArraySetByName("%AName%", %val%, i, %Y%);</Command>
	</Effect>
	
	<Effect name="Quest Array Set Column">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="val" dispName="Value" varType="float">0.0</Param>
	  <Param name="X" dispName="Column" varType="long">1</Param>
      <Command>for(i=xsArrayGetSizeYByName("%AName%");>0) </Command>
      <Command>   xsArraySetByName("%AName%", %val%, %X%, i);</Command>
	</Effect>
	
	<Effect name="Quest Array Delete">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="X" dispName="Column" varType="long">1</Param>
      <Command>xsArrayDelete(xsArrayGetID("%AName%"), %X%);</Command>
	</Effect>
	
	<Effect name="Quest Array Set All">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="val" dispName="Value" varType="float">0.0</Param>
      <Command>xsArrayFillByName("%AName%", %Value%);</Command>
	</Effect>
	
	<Effect name="Quest Array Replace Value">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="val" dispName="Value to be Replaced" varType="float">0.0</Param>
	  <Param name="val2" dispName="New Value" varType="float">0.0</Param>
      <Command>xsArrayFillByName("%AName%", %val2%, %val%);</Command>
	</Effect>

	<Effect name="Quest Array Echo">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
	  <Param name="X" dispName="Pos X" varType="long">1</Param>
	  <Param name="Y" dispName="Pos Y" varType="long">1</Param>
      <Command>xsArrayEcho("%AName%", %X%, %Y%);</Command>
	</Effect>
	
	<Effect name="Quest Array Echo All">
      	<Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      	<Param name="mat" dispName="Matrix" VarType="bool">false</Param>
		<Command>if(%mat%) xsArrayEchoAll2("%AName%");</Command>
		<Command>else xsArrayEchoAll("%AName%");</Command>
	</Effect>
	
	<Effect name="Quest Array Modify">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      <Param name="Oper" dispName="$$23955$$Operator" VarType="string">+</Param>
	  <Param name="Value" dispName="$$23859$$Value" VarType="float">0</Param>
	  <Param name="X" dispName="Pos X" varType="long">1</Param>
	  <Param name="Y" dispName="Pos Y" varType="long">1</Param>
      <Command>xsArraySetByName("%AName%", xsArrayGetByName("%AName%", %X%, %Y%) %Oper% %Value%, %X%, %Y%);</Command>
	</Effect>
	
	<Effect name="Quest Array Modify 2">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      <Param name="A1" dispName="X1, Y1" varType="string">1, 2</Param>
      <Param name="Oper" dispName="$$23955$$Operator" VarType="string">+</Param>
	  <Param name="AName2" dispName="Array Name 2" VarType="string">Array 2</Param>
	  <Param name="A2" dispName="X2, Y2" varType="string">3, 4</Param>
      <Command>xsArraySetByName("%AName%", xsArrayGetByName("%AName%", %A1%) %Oper% xsArrayGetByName("%AName2%", %A2%), %A1%);</Command>
	</Effect>
	
	<Effect name="Quest Array Swap">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      <Param name="R1" dispName="Column 1" varType="long">1</Param>
      <Param name="R2" dispName="Column 2" varType="long">2</Param>
      <Command>xsArraySwapByName("%AName%", %R1%, %R2%);</Command>
	</Effect>
	
	<Effect name="QV Set Array">
      <Param name="AName" dispName="Array Name" VarType="string">Array 1</Param>
      <Param name="QuestVar" dispName="$$23952$$Var Name" varType="string">QV1</Param>
      <Param name="X" dispName="Pos X" varType="long">1</Param>
      <Param name="Y" dispName="Pos Y" varType="long">1</Param>
      <Command>trQuestVarSet("%QuestVar%", xsArrayGetByName("%AName%", %X%, %Y%));</Command>
	</Effect>
   	
   	<!-- ************* Misc QV Effects **************** -->
   	
   <Effect name="Unit Position To QV Vector">
      <Param name="SrcObject" dispName="Source Unit" VarType="unit">default</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="reverse" dispName="Reverse" VarType="bool">false</Param>
      <Command>trVectorQuestVarSet("%VQVName%", kbGetBlockPosition("%SrcObject%", %reverse%));</Command>
   </Effect>

   <Effect name="Army Position to QV Vector">
      <Param name="army" dispName="$$22348$$Army" VarType="group">0,0</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Command>xsSetContextPlayer(xsVectorGetX(vector(%army%,-1)));</Command>
      <Command>kbLookAtAllUnitsOnMap();</Command>
      <Command>trVectorQuestVarSet("%VQVName%",kbArmyGetLocation(xsVectorGetY(vector(%army%,-1))));</Command>
   </Effect>

   <Effect name="Army Deploy At QV Vector">
      <Param name="SrcArmy" dispName="$$22348$$Army" VarType="group">default</Param>
	  <Param name="ProtoName" dispName="$$22434$$ProtoName" varType="protounit">Villager</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="Count"  dispName="$$22435$$Count" varType="long">0</Param>
	  <Param name="Heading"  dispName="$$22432$$Heading" varType="long">0</Param>
	  <Param name="Clear" dispName="$$22464$$Clear Existing Units:" varType="bool">true</Param>
	  <Command>trArmyDispatch("%SrcArmy%", "%ProtoName%", %Count%, trVectorQuestVarGetX("%VQVName%"), trVectorQuestVarGetY("%VQVName%"), trVectorQuestVarGetZ("%VQVName%"), %Heading%, %Clear%);</Command>
   </Effect>
   
   <Effect name="Army Teleport To QV Vector">
      <Param name="SrcArmy" dispName="$$22348$$Army" VarType="group">default</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Command>trArmySelect("%SrcArmy%");</Command>
	  <Command>trUnitTeleport(trVectorQuestVarGetX("%VQVName%"), trVectorQuestVarGetY("%VQVName%"), trVectorQuestVarGetZ("%VQVName%"));</Command>
   </Effect>

  <Effect name="Army Move To QV Vector">
      <Param name="SrcArmy" dispName="$$22348$$Army" VarType="group">default</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="EventID" dispName="$$22362$$Trigger" varType="event">-1</Param>
	  <Param name="AttackMove" dispName="$$22416$$Attack Move" varType="bool">false</Param>
      <Command>trArmySelect("%SrcArmy%");</Command>
      <Command>trUnitMoveToPoint(trVectorQuestVarGetX("%VQVName%"), trVectorQuestVarGetY("%VQVName%"), trVectorQuestVarGetZ("%VQVName%"), %EventID%, %AttackMove%);</Command>
   </Effect>

   <Effect name="Army Build Building At QV Vector">
      <Param name="SrcArmy" dispName="$$22348$$Army" VarType="group">default</Param>
      <Param name="ProtoUnit" dispName="$$22412$$ProtoUnit To Build" VarType="protounit">default</Param>
      <Param name="VQVName" dispName="Vector Name" VarType="string">V1</Param>
      <Command>trArmySelect("%SrcArmy%");</Command>
      <Command>trUnitBuildUnit("%ProtoUnit%", trVectorQuestVarGet("%VQVname%"));</Command>
   </Effect>
   
	<Effect name="Fire Event Random 4">
      	<Param name="EventID1" dispName="Event1" varType="event">-1</Param>
      	<Param name="EventID2" dispName="Event2" varType="event">-1</Param>
      	<Param name="EventID3" dispName="Event3" varType="event">-1</Param>
      	<Param name="EventID4" dispName="Event4" varType="event">-1</Param>
		<Command>trQuestVarSetFromRand("foo", 1, 4, true);</Command>
		<Command>if		(trQuestVarGet("foo")==1) trEventFire(%EventID1%);</Command>
		<Command>else if(trQuestVarGet("foo")==2) trEventFire(%EventID2%);</Command>
		<Command>else if(trQuestVarGet("foo")==3) trEventFire(%EventID3%);</Command>
		<Command>else if(trQuestVarGet("foo")==4) trEventFire(%EventID4%);</Command>
   </Effect>

   <Effect name="Teleport Units To QV Vector">
      <Param name="SrcObject" dispName="$$22295$$Source Units" varType="unit">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
      <Command>trUnitSelectClear();</Command>
      <Command loop="" loopParm="SrcObject">trUnitSelect("%SrcObject%");</Command>
	  <Command>trUnitTeleport(trVectorQuestVarGetX("%V%"),trVectorQuestVarGetY("%V%"),trVectorQuestVarGetZ("%V%"));</Command>
   </Effect>
   
   <Effect name="Move To QV Vector">
      <Param name="SrcObject" dispName="$$22295$$Source Units" varType="unit">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="EventID" dispName="$$22362$$Trigger" varType="event">-1</Param>
      <Param name="AttackMove" dispName="$$18986$$Attack Move" varType="bool">false</Param>
      <Command>trUnitSelectClear();</Command>
      <Command loop="" loopParm="SrcObject">trUnitSelect("%SrcObject%");</Command>
      <Command>trUnitMoveToPoint(trVectorQuestVarGetX("%V%"),trVectorQuestVarGetY("%V%"),trVectorQuestVarGetZ("%V%"), %EventID%, %AttackMove%);</Command>
   </Effect>
   
   <Effect name="Unit Build Building At QV Vector">
      <Param name="SrcObject" dispName="$$22295$$Source Units" varType="unit">default</Param>
      <Param name="ProtoUnit" dispName="$$22412$$ProtoUnit To Build" VarType="protounit">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
      <Command>trUnitSelectClear();</Command>
      <Command loop="" loopParm="SrcObject">trUnitSelect("%SrcObject%");</Command>
      <Command>trUnitBuildUnit("%ProtoUnit%", trVectorQuestVarGet("%V%"));</Command>
   </Effect>
   
   <Effect name="Unit Create At QV Vector">
	  <Param name="PlayerID" dispName="$$22301$$Player" VarType="long">0</Param>
	  <Param name="ProtoName" dispName="$$22434$$ProtoName" varType="protounit">Villager</Param>
	  <Param name="ScenName" dispName="$$20509$$Name" varType="string">Default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
	  <Param name="Heading"  dispName="$$22432$$Heading" varType="long">0</Param>
	  <Command>trUnitCreate("%ProtoName%", "%ScenName%", trVectorQuestVarGetX("%V%"),trVectorQuestVarGetY("%V%"),trVectorQuestVarGetZ("%V%") , %Heading%, %PlayerID%);</Command>
   </Effect>
   
   <Effect name="Invoke God Power At QV Vectors">
	  <Param name="PlayerID" dispName="$$22301$$Player" VarType="long">0</Param>
      <Param name="PowerName" dispName="$$22451$$Power" varType="godpower">default</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="V2" dispName="Vector Name" VarType="string">V2</Param>
	  <Param name="SrcObject" dispName="$$22295$$Source Units" varType="unit">default</Param>
	  <Command>trUnitSelectClear();</Command>
      <Command loop="" loopParm="SrcObject">trUnitSelect("%SrcObject%");</Command>
      <Command>trTechInvokeGodPower(%PlayerID%, "%PowerName%", trVectorQuestVarGet("%V%"), trVectorQuestVarGet("%V2%"));</Command>
   </Effect>
   
   <Effect name="Flare Minimap At QV Vector">
      <Param name="PlayerID" dispName="$$22301$$Player" VarType="long">0</Param>
      <Param name="Duration" dispName="$$20510$$Duration" varType="float">1.0</Param>
      <Param name="V" dispName="Vector Name" VarType="string">V1</Param>
      <Param name="Flash" dispName="$$22492$$Flash" varType="bool">true</Param>
      <Command>trMinimapFlare(%PlayerID%, %Duration%, trVectorQuestVarGet("%V%"), %Flash%);</Command>
   </Effect>

	<Effect name="Activate Trigger Loader Z">
		<Param name="info1" dispName="Info" varType="string">This trigger loads custom functions that can be used by other triggers.</Param>
		<Param name="info2" dispName="Info" varType="string">Please load this effect in an empty trigger before you add triggers that need this.</Param>
		<Param name="info3" dispName="Info" varType="string">The triggers requiring this should mention it somewhere. Not all triggers need it.</Param>
		<!--Param name="luis" dispName="AI Get Random:" VarType="strwing">%u</Param-->
		<Param name="mod" dispName="Don't touch this!" varType="strwing">%%</Param>
		<Command>xsEnableRule("IfyouarereadingthisthenjustsoyouknowIammuchmuchbetterthanyouwilleverbe");</Command>
		<Command>xsDisableSelf();}}</Command>
		
		<!-- ***************** CONST & VAR  **************** -->
		
		<Command>const float PI = 3.14159265358979323846;</Command>
		<Command>const float e = 2.71828182845904523536;</Command>
		<Command>//Internal Vars:</Command>
		<Command>float seed = 123;</Command>
		<Command>bool isMultiplayer = true;</Command>
		<Command>float M = 233280;</Command>
		<Command>float A = 9301;</Command>
		<Command>float C = 4927;</Command>
		<Command>extern int trQuestVarsN = 1;</Command>
		<Command>extern int trQuestVarsOP = 0;</Command>
		<Command>int FP = -1;</Command>
		<Command>int contextIndex = 1;</Command>
		<Command>//Globals:</Command>
		<Command>int cMyID = -1;</Command>
		<Command>int cNumberNonGaiaPlayers = -1;</Command>
		<Command>int cMyCulture = -1;</Command>
		<Command>int cMyCiv = -1;</Command>
		<Command>int cGameMode = -1;</Command>
		<Command>//Unit Stances:</Command>
		<Command>const int cUnitStanceAggressive=0;</Command>
		<Command>const int cUnitStanceDefensive=1;</Command>
		<Command>const int cUnitStancePassive=2;</Command>
		<Command>//Victory Condition/Game Mode Types:</Command>
		<Command>const int cGameModeSupremacy=0;</Command>
		<Command>const int cGameModeConquest=1;</Command>
		<Command>const int cGameModeLightning=2;</Command>
		<Command>const int cGameModeDeathmatch=3;</Command>
		<Command>//Difficulty Levels:</Command>
		<Command>const int cDifficultyEasy=0;</Command>
		<Command>const int cDifficultyModerate=1;</Command>
		<Command>const int cDifficultyHard=2;</Command>
		<Command>const int cDifficultyNightmare=3;</Command>
		<Command>//Age Constants:</Command>
		<Command>const int cAge1=0;</Command>
		<Command>const int cAge2=1;</Command>
		<Command>const int cAge3=2;</Command>
		<Command>const int cAge4=3;</Command>
		<Command>const int cAge5=4;</Command>
		<Command>//Player Relation Constants:</Command>
		<Command>const int cPlayerRelationAny=-1;</Command>
		<Command>const int cPlayerRelationSelf=0;</Command>
		<Command>const int cPlayerRelationEnemy=2;</Command>
		<Command>const int cPlayerRelationAlly=1;</Command>
		<Command>//ProtoPower Constants:</Command>
		<Command>const int cPowerLure=0;</Command>
		<Command>const int cPowerCarnivora=1;</Command>
		<Command>const int cPowerBlessingofZeus=2;</Command>
		<Command>const int cPowerBolt=3;</Command>
		<Command>const int cPowerBronzeXP05=4;</Command>
		<Command>const int cPowerBronze=5;</Command>
		<Command>const int cPowerCeaseFireNomad=6;</Command>
		<Command>const int cPowerCeaseFire=7;</Command>
		<Command>const int cPowerChangeCaladria=8;</Command>
		<Command>const int cPowerChangeChimera=9;</Command>
		<Command>const int cPowerChangeCyclops=10;</Command>
		<Command>const int cPowerChangeHydra=11;</Command>
		<Command>const int cPowerChangeManticore=12;</Command>
		<Command>const int cPowerChangeNemean=13;</Command>
		<Command>const int cPowerChaos=14;</Command>
		<Command>const int cPowerChickenStorm=15;</Command>
		<Command>const int cPowerCitadel=16;</Command>
		<Command>const int cPowerDwarvenMine=17;</Command>
		<Command>const int cPowerCurse=18;</Command>
		<Command>const int cPowerEarthquake=19;</Command>
		<Command>const int cPowerEclipse=20;</Command>
		<Command>const int cPowerFlamingWeapons=21;</Command>
		<Command>const int cPowerForestFire=22;</Command>
		<Command>const int cPowerFrost=23;</Command>
		<Command>const int cPowerGaiaForestSPC=24;</Command>
		<Command>const int cPowerGaiaForest=25;</Command>
		<Command>const int cPowerGoatunheim=26;</Command>
		<Command>const int cPowerGreatHunt=27;</Command>
		<Command>const int cPowerHealingSpring=28;</Command>
		<Command>const int cPowerHeroize=29;</Command>
		<Command>const int cPowerHesperides=30;</Command>
		<Command>const int cPowerImplode=31;</Command>
		<Command>const int cPowerLightningStorm=32;</Command>
		<Command>const int cPowerLocustSwarm=33;</Command>
		<Command>const int cPowerMeteor=34;</Command>
		<Command>const int cPowerNidhogg=35;</Command>
		<Command>const int cPowerPestilence=36;</Command>
		<Command>const int cPowerPlenty=37;</Command>
		<Command>const int cPowerProsperity=38;</Command>
		<Command>const int cPowerRagnorok=39;</Command>
		<Command>const int cPowerRain=40;</Command>
		<Command>const int cPowerRestoration=41;</Command>
		<Command>const int cPowerDeconstruction=42;</Command>
		<Command>const int cPowerReverseWonder=43;</Command>
		<Command>const int cPowerShiftingSands=44;</Command>
		<Command>const int cPowerSeedofGaia=45;</Command>
		<Command>const int cPowerSentinel=46;</Command>
		<Command>const int cPowerPlagueofSerpents=47;</Command>
		<Command>const int cPowerAncestors=48;</Command>
		<Command>const int cPowerFimbulwinter=49;</Command>
		<Command>const int cPowerSonofOsiris=50;</Command>
		<Command>const int cPowerSPCLightningStorm=51;</Command>
		<Command>const int cPowerSPCMeteor=52;</Command>
		<Command>const int cPowerSpiders=53;</Command>
		<Command>const int cPowerSpy=54;</Command>
		<Command>const int cPowerTartarianGate=55;</Command>
		<Command>const int cPowerTitanGate=56;</Command>
		<Command>const int cPowerTornadoXP05=57;</Command>
		<Command>const int cPowerTornado=58;</Command>
		<Command>const int cPowerTraitors=59;</Command>
		<Command>const int cPowerTraitorsSPC=60;</Command>
		<Command>const int cPowerTremor=61;</Command>
		<Command>const int cPowerUndermine=62;</Command>
		<Command>const int cPowerUnderworldPassage=63;</Command>
		<Command>const int cPowerVision=64;</Command>
		<Command>const int cPowerVolcano=65;</Command>
		<Command>const int cPowerVortex=66;</Command>
		<Command>const int cPowerWalkingBerryBushes=67;</Command>
		<Command>const int cPowerWalkingWoods=68;</Command>
		<Command>const int cPowerWellOfUrd=69;</Command>
		<Command>//Power Type Constants:</Command>
		<Command>const int cPowerTypeGeneric=0;</Command>
		<Command>const int cPowerTypeTempUnit=1;</Command>
		<Command>const int cPowerTypeLightning=2;</Command>
		<Command>const int cPowerTypeFrost=3;</Command>
		<Command>const int cPowerTypeLocust=4;</Command>
		<Command>const int cPowerTypeTeleport=5;</Command>
		<Command>const int cPowerTypeMeteor=6;</Command>
		<Command>const int cPowerTypeInferno=7;</Command>
		<Command>const int cPowerTypeHealing=8;</Command>
		<Command>const int cPowerTypeEnrage=9;</Command>
		<Command>const int cPowerTypeClone=10;</Command>
		<Command>const int cPowerTypeDamageUnit=11;</Command>
		<Command>const int cPowerTypeTornado=12;</Command>
		<Command>const int cPowerTypeRain=13;</Command>
		<Command>const int cPowerTypeUndermine=14;</Command>
		<Command>const int cPowerTypeSnowStorm=15;</Command>
		<Command>const int cPowerTypeBronze=16;</Command>
		<Command>const int cPowerTypePeace=17;</Command>
		<Command>const int cPowerTypeProsperity=18;</Command>
		<Command>const int cPowerTypeEclipse=19;</Command>
		<Command>const int cPowerTypeShowUnit=20;</Command>
		<Command>const int cPowerTypeBolt=21;</Command>
		<Command>const int cPowerTypeSpy=22;</Command>
		<Command>const int cPowerTypeTechActivate=23;</Command>
		<Command>const int cPowerTypeAnimalMagnet=24;</Command>
		<Command>const int cPowerTypeHealingSpring=25;</Command>
		<Command>const int cPowerTypeSwapUnit=26;</Command>
		<Command>const int cPowerTypeRebellion=27;</Command>
		<Command>const int cPowerTypeSandstorm=28;</Command>
		<Command>const int cPowerTypeEarthquake=29;</Command>
		<Command>const int cPowerTypePlenty=30;</Command>
		<Command>const int cPowerTypeForestFire=31;</Command>
		<Command>const int cPowerTypeFlamingWeapons=32;</Command>
		<Command>const int cPowerTypeDwarvenMines=33;</Command>
		<Command>const int cPowerTypePestilence=34;</Command>
		<Command>const int cPowerTypeReverseTime=35;</Command>
		<Command>const int cPowerTypeTraitors=36;</Command>
		<Command>const int cPowerTypeVolcano=37;</Command>
		<Command>const int cPowerTypeTremor=38;</Command>
		<Command>const int cPowerTypeTartarianGate=39;</Command>
		<Command>const int cPowerTypeVortex=40;</Command>
		<Command>const int cPowerTypeHesperides=41;</Command>
		<Command>const int cPowerTypeChaos=42;</Command>
		<Command>const int cPowerTypeSpiders=43;</Command>
		<Command>const int cPowerTypeHeroize=44;</Command>
		<Command>const int cPowerTypeImplode=45;</Command>
		<Command>const int cPowerTypeTitanGate=46;</Command>
		<Command>const int cPowerTypeGaiaForest=47;</Command>
		<Command>const int cPowerTypeCarnivora=48;</Command>
		<Command>//Unit Movement Types:</Command>
		<Command>const int cMovementTypeNone=0;</Command>
		<Command>const int cMovementTypeLand=1;</Command>
		<Command>const int cMovementTypeWater=2;</Command>
		<Command>const int cMovementTypeAir=4;</Command>
		<Command>const int cMovementTypeNonSolid=8;</Command>
		<Command>//KB Unit States:</Command>
		<Command>const int cUnitStateNone=0;</Command>
		<Command>const int cUnitStateBuilding=1;</Command>
		<Command>const int cUnitStateAlive=2;</Command>
		<Command>const int cUnitStateDead=4;</Command>
		<Command>const int cUnitStateAny=255;</Command>
		<Command>const int cUnitStateAliveOrBuilding=3;</Command>
		<Command>//Civs:</Command>
		<Command>const int cCivZeus=0;</Command>
		<Command>const int cCivPoseidon=1;</Command>
		<Command>const int cCivHades=2;</Command>
		<Command>const int cCivIsis=3;</Command>
		<Command>const int cCivRa=4;</Command>
		<Command>const int cCivSet=5;</Command>
		<Command>const int cCivOdin=6;</Command>
		<Command>const int cCivThor=7;</Command>
		<Command>const int cCivLoki=8;</Command>
		<Command>const int cCivKronos=9;</Command>
		<Command>const int cCivOuranos=10;</Command>
		<Command>const int cCivGaia=11;</Command>
		<Command>const int cCivRandom=12;</Command>
		<Command>const int cCivGreek=13;</Command>
		<Command>const int cCivNorse=14;</Command>
		<Command>const int cCivEgyptian=15;</Command>
		<Command>const int cCivAtlantean=16;</Command>
		<Command>const int cCivNature=17;</Command>
		<Command>//Cultures:</Command>
		<Command>const int cCultureGreek=0;</Command>
		<Command>const int cCultureEgyptian=1;</Command>
		<Command>const int cCultureNorse=2;</Command>
		<Command>const int cCultureAtlantean=3;</Command>
		<Command>const int cCultureNature=4;</Command>
		<Command>//Resources:</Command>
		<Command>const int cResourceGold=0;</Command>
		<Command>const int cResourceWood=1;</Command>
		<Command>const int cResourceFood=2;</Command>
		<Command>const int cResourceFavor=3;</Command>
		<Command>const int cAllResources=-1234;</Command>
		<Command>//Unit Action Constants:</Command>
		<Command>const int cActionBored=0;</Command>
		<Command>const int cActionBuild=1;</Command>
		<Command>const int cActionConvert=2;</Command>
		<Command>const int cActionDeath=3;</Command>
		<Command>const int cActionDecay=4;</Command>
		<Command>const int cActionGather=5;</Command>
		<Command>const int cActionHandAttack=6;</Command>
		<Command>const int cActionHeal=7;</Command>
		<Command>const int cActionHunting=8;</Command>
		<Command>const int cActionIdle=9;</Command>
		<Command>const int cActionMove=10;</Command>
		<Command>const int cActionMoveByGroup=11;</Command>
		<Command>const int cActionRangedAttack=12;</Command>
		<Command>const int cActionRepair=13;</Command>
		<Command>const int cActionResearch=14;</Command>
		<Command>const int cActionTrain=15;</Command>
		<Command>const int cActionOverrideAnimation=16;</Command>
		<Command>const int cActionWork=17;</Command>
		<Command>const int cActionAttack=18;</Command>
		<Command>const int cActionUnused0=19;</Command>
		<Command>const int cActionWander=20;</Command>
		<Command>const int cActionEnter=21;</Command>
		<Command>const int cActionAutoConvert=22;</Command>
		<Command>const int cActionBirth=23;</Command>
		<Command>const int cActionAreaAttack=24;</Command>
		<Command>const int cActionFreeze=25;</Command>
		<Command>const int cActionDormant=26;</Command>
		<Command>const int cActionGatherPoint=27;</Command>
		<Command>const int cActionMoveAttack=28;</Command>
		<Command>const int cActionThrown=29;</Command>
		<Command>const int cActionLightning=30;</Command>
		<Command>const int cActionLight=31;</Command>
		<Command>const int cActionJumpAttack=32;</Command>
		<Command>const int cActionUnused1=33;</Command>
		<Command>const int cActionMeteor=34;</Command>
		<Command>const int cActionAttach=35;</Command>
		<Command>const int cActionGuide=36;</Command>
		<Command>const int cActionJumpMove=37;</Command>
		<Command>const int cActionPickup=38;</Command>
		<Command>const int cActionDiveBomb=39;</Command>
		<Command>const int cActionUnused2=40;</Command>
		<Command>const int cActionRegenerate=41;</Command>
		<Command>const int cActionUse=42;</Command>
		<Command>const int cActionEmpower=43;</Command>
		<Command>const int cActionAutoGather=44;</Command>
		<Command>const int cActionThrow=45;</Command>
		<Command>const int cActionGore=46;</Command>
		<Command>const int cActionDropoff=47;</Command>
		<Command>const int cActionWhirlwindAttack=48;</Command>
		<Command>const int cActionChargedRangedAttack=49;</Command>
		<Command>const int cActionEject=50;</Command>
		<Command>const int cActionFreezeAttack=51;</Command>
		<Command>const int cActionConvertAttack=52;</Command>
		<Command>const int cActionTrade=53;</Command>
		<Command>const int cActionGuard=54;</Command>
		<Command>const int cActionAutoMover=55;</Command>
		<Command>const int cActionGetOnMover=56;</Command>
		<Command>const int cActionSwallow=57;</Command>
		<Command>const int cActionGate=58;</Command>
		<Command>const int cActionLightningAttack=59;</Command>
		<Command>const int cActionExplore=60;</Command>
		<Command>const int cActionEat=61;</Command>
		<Command>const int cActionBoost=62;</Command>
		<Command>const int cActionCorpseDecay=63;</Command>
		<Command>const int cActionTeleport=64;</Command>
		<Command>const int cActionBuckAttack=65;</Command>
		<Command>const int cActionTownBell=66;</Command>
		<Command>const int cActionHeroDeath=67;</Command>
		<Command>const int cActionUnbuild=68;</Command>
		<Command>const int cActionAutoLOS=69;</Command>
		<Command>//Tech Status:</Command>
		<Command>const int cTechStatusUnobtainable=0;</Command>
		<Command>const int cTechStatusObtainable=1;</Command>
		<Command>const int cTechStatusAvailable=2;</Command>
		<Command>const int cTechStatusResearching=3;</Command>
		<Command>const int cTechStatusActive=4;</Command>
		<Command>const int cTechStatusPersistent=5;</Command>
		<Command>//Area Types:</Command>
		<Command>const int cAreaTypeForest=1;</Command>
		<Command>const int cAreaTypeWater=2;</Command>
		<Command>const int cAreaTypeImpassableLand=3;</Command>
		<Command>const int cAreaTypeGold=4;</Command>
		<Command>const int cAreaTypeSettlement=5;</Command>
		<Command>//AreaGroup Types:</Command>
		<Command>const int cAreaGroupTypeLand=0;</Command>
		<Command>const int cAreaGroupTypeWater=1;</Command>
		<Command>//KB TechTree Unit Functions:</Command>
		<Command>const int cUnitFunctionBuilder=0;</Command>
		<Command>const int cUnitFunctionGatherer=1;</Command>
		<Command>const int cUnitFunctionEmpower=2;</Command>
		<Command>const int cUnitFunctionFish=3;</Command>
		<Command>const int cUnitFunctionWaterTransport=4;</Command>
		<Command>const int cUnitFunctionTrade=5;</Command>
		<Command>const int cUnitFunctionUnknown=6;</Command>
		<Command>//KB TechTree Upgrade Types:</Command>
		<Command>const int cUpgradeTypeAttack=0;</Command>
		<Command>const int cUpgradeTypeArmor=1;</Command>
		<Command>const int cUpgradeTypeHitpoints=2;</Command>
		<Command>const int cUpgradeTypeSpeed=3;</Command>
		<Command>const int cUpgradeTypeWorkRate=4;</Command>
		<Command>const int cUpgradeTypeTrainPoints=5;</Command>
		<Command>const int cUpgradeTypeAny=6;</Command>
		<Command>//Techs: 507 total</Command>
		<Command>const int cTechAge1=0;</Command>
		<Command>const int cTechAge2=1;</Command>
		<Command>const int cTechAge3=2;</Command>
		<Command>const int cTechMediumArchers=3;</Command>
		<Command>const int cTechHeavyArchers=4;</Command>
		<Command>const int cTechChampionArchers=5;</Command>
		<Command>const int cTechMediumInfantry=6;</Command>
		<Command>const int cTechHeavyInfantry=7;</Command>
		<Command>const int cTechChampionInfantry=8;</Command>
		<Command>const int cTechHusbandry=9;</Command>
		<Command>const int cTechPlow=10;</Command>
		<Command>const int cTechIrrigation=11;</Command>
		<Command>const int cTechCopperWeapons=12;</Command>
		<Command>const int cTechBronzeWeapons=13;</Command>
		<Command>const int cTechIronWeapons=14;</Command>
		<Command>const int cTechCopperMail=15;</Command>
		<Command>const int cTechBronzeMail=16;</Command>
		<Command>const int cTechIronMail=17;</Command>
		<Command>const int cTechCopperShields=18;</Command>
		<Command>const int cTechBronzeShields=19;</Command>
		<Command>const int cTechIronShields=20;</Command>
		<Command>const int cTechAmbassadors=21;</Command>
		<Command>const int cTechTaxCollectors=22;</Command>
		<Command>const int cTechCoinage=23;</Command>
		<Command>const int cTechMediumCavalry=24;</Command>
		<Command>const int cTechHeavyCavalry=25;</Command>
		<Command>const int cTechChampionCavalry=26;</Command>
		<Command>const int cTechWatchTower=27;</Command>
		<Command>const int cTechGuardTower=28;</Command>
		<Command>const int cTechBallistaTower=29;</Command>
		<Command>const int cTechBoilingOil=30;</Command>
		<Command>const int cTechLevyInfantry=31;</Command>
		<Command>const int cTechBurningPitch=32;</Command>
		<Command>const int cTechMasons=33;</Command>
		<Command>const int cTechPickaxe=34;</Command>
		<Command>const int cTechHandAxe=35;</Command>
		<Command>const int cTechShaftMine=36;</Command>
		<Command>const int cTechBowSaw=37;</Command>
		<Command>const int cTechQuarry=38;</Command>
		<Command>const int cTechCarpenters=39;</Command>
		<Command>const int cTechBravery=40;</Command>
		<Command>const int cTechValleyoftheKings=41;</Command>
		<Command>const int cTechLightningStorm=42;</Command>
		<Command>const int cTechLocustSwarm=43;</Command>
		<Command>const int cTechTornado=44;</Command>
		<Command>const int cTechWinterHarvest=45;</Command>
		<Command>const int cTechSafeguard=46;</Command>
		<Command>const int cTechRampage=47;</Command>
		<Command>const int cTechMithrilBreastplate=48;</Command>
		<Command>const int cTechCallOfValhalla=49;</Command>
		<Command>const int cTechArcticWinds=50;</Command>
		<Command>const int cTechArcticGale=51;</Command>
		<Command>const int cTechWrathOfTheDeep=52;</Command>
		<Command>const int cTechSpiritedCharge=53;</Command>
		<Command>const int cTechThunderingHooves=54;</Command>
		<Command>const int cTechBerserkergang=55;</Command>
		<Command>const int cTechRime=56;</Command>
		<Command>const int cTechFrost=57;</Command>
		<Command>const int cTechDraftHorses=58;</Command>
		<Command>const int cTechEngineers=59;</Command>
		<Command>const int cTechArchitects=60;</Command>
		<Command>const int cTechMeteor=61;</Command>
		<Command>const int cTechBoneBow=62;</Command>
		<Command>const int cTechAxeofVengeance=63;</Command>
		<Command>const int cTechDesertWind=64;</Command>
		<Command>const int cTechEnclosedDeck=65;</Command>
		<Command>const int cTechCladding=66;</Command>
		<Command>const int cTechFortifiedWall=67;</Command>
		<Command>const int cTechAge1Zeus=68;</Command>
		<Command>const int cTechSkinOfTheRhino=69;</Command>
		<Command>const int cTechAge15Egyptian=70;</Command>
		<Command>const int cTechSacredCats=71;</Command>
		<Command>const int cTechGraniteBlood=72;</Command>
		<Command>const int cTechHamarrtroll=73;</Command>
		<Command>const int cTechCriosphinx=74;</Command>
		<Command>const int cTechHieracosphinx=75;</Command>
		<Command>const int cTechMonstrousRage=76;</Command>
		<Command>const int cTechPhobosSpearofPanic=77;</Command>
		<Command>const int cTechBacchanalia=78;</Command>
		<Command>const int cTechSunRay=79;</Command>
		<Command>const int cTechSylvanLore=80;</Command>
		<Command>const int cTechForgeofOlympus=81;</Command>
		<Command>const int cTechAge1Hades=82;</Command>
		<Command>const int cTechAge1Poseidon=83;</Command>
		<Command>const int cTechCreateGold=84;</Command>
		<Command>const int cTechAge1Ra=85;</Command>
		<Command>const int cTechAge1Isis=86;</Command>
		<Command>const int cTechAge1Set=87;</Command>
		<Command>const int cTechAge1Odin=88;</Command>
		<Command>const int cTechAge1Thor=89;</Command>
		<Command>const int cTechAge1Loki=90;</Command>
		<Command>const int cTechAuroraBorealis=91;</Command>
		<Command>const int cTechAge2Athena=92;</Command>
		<Command>const int cTechAge2Ares=93;</Command>
		<Command>const int cTechAge2Hermes=94;</Command>
		<Command>const int cTechAge3Dionysos=95;</Command>
		<Command>const int cTechAge3Apollo=96;</Command>
		<Command>const int cTechAge3Aphrodite=97;</Command>
		<Command>const int cTechAge4Hera=98;</Command>
		<Command>const int cTechAge4Artemis=99;</Command>
		<Command>const int cTechAge4Hephaestus=100;</Command>
		<Command>const int cTechHuntingDogs=101;</Command>
		<Command>const int cTechHandofTalos=102;</Command>
		<Command>const int cTechSarissa=103;</Command>
		<Command>const int cTechAegisShield=104;</Command>
		<Command>const int cTechWingedMessenger=105;</Command>
		<Command>const int cTechAge2Anubis=106;</Command>
		<Command>const int cTechAge2Bast=107;</Command>
		<Command>const int cTechAge2Ptah=108;</Command>
		<Command>const int cTechAge3Hathor=109;</Command>
		<Command>const int cTechAge3Nephthys=110;</Command>
		<Command>const int cTechAge3Sekhmet=111;</Command>
		<Command>const int cTechAge4Thoth=112;</Command>
		<Command>const int cTechAge4Osiris=113;</Command>
		<Command>const int cTechAge4Horus=114;</Command>
		<Command>const int cTechFeetoftheJackal=115;</Command>
		<Command>const int cTechAge4=116;</Command>
		<Command>const int cTechAge2Forseti=117;</Command>
		<Command>const int cTechAge2Heimdall=118;</Command>
		<Command>const int cTechAge2Freyja=119;</Command>
		<Command>const int cTechAge3Skadi=120;</Command>
		<Command>const int cTechAge3Bragi=121;</Command>
		<Command>const int cTechAge3Njord=122;</Command>
		<Command>const int cTechAge4Hel=123;</Command>
		<Command>const int cTechAge4Baldr=124;</Command>
		<Command>const int cTechAge4Tyr=125;</Command>
		<Command>const int cTechSignalFires=126;</Command>
		<Command>const int cTechStoneWall=127;</Command>
		<Command>const int cTechShoulderofTalos=128;</Command>
		<Command>const int cTechSkeletonPower=129;</Command>
		<Command>const int cTechBookofThoth=130;</Command>
		<Command>const int cTechFaceoftheGorgon=131;</Command>
		<Command>const int cTechCitadelWall=132;</Command>
		<Command>const int cTechUnderworldPassage=133;</Command>
		<Command>const int cTechRestoration=134;</Command>
		<Command>const int cTechConscriptInfantry=135;</Command>
		<Command>const int cTechLevyArchers=136;</Command>
		<Command>const int cTechConscriptArchers=137;</Command>
		<Command>const int cTechLevyCavalry=138;</Command>
		<Command>const int cTechConscriptCavalry=139;</Command>
		<Command>const int cTechCarrierPigeons=140;</Command>
		<Command>const int cTechFloodControl=141;</Command>
		<Command>const int cTechPharaohRespawn=142;</Command>
		<Command>const int cTechStartingUnitsNorse=143;</Command>
		<Command>const int cTechStartingUnitsGreek=144;</Command>
		<Command>const int cTechStartingUnitsEgyptian=145;</Command>
		<Command>const int cTechGreatHunt=146;</Command>
		<Command>const int cTechCeaseFire=147;</Command>
		<Command>const int cTechMonument1=148;</Command>
		<Command>const int cTechMonument2=149;</Command>
		<Command>const int cTechMonument3=150;</Command>
		<Command>const int cTechMonument4=151;</Command>
		<Command>const int cTechUndermine=152;</Command>
		<Command>const int cTechDwarvenMail=153;</Command>
		<Command>const int cTechDwarvenShields=154;</Command>
		<Command>const int cTechDwarvenWeapons=155;</Command>
		<Command>const int cTechRain=156;</Command>
		<Command>const int cTechSerpentSpear=157;</Command>
		<Command>const int cTechFloodoftheNile=158;</Command>
		<Command>const int cTechVaultsofErebus=159;</Command>
		<Command>const int cTechLordofHorses=160;</Command>
		<Command>const int cTechOlympicParentage=161;</Command>
		<Command>const int cTechPigSticker=162;</Command>
		<Command>const int cTechLoneWanderer=163;</Command>
		<Command>const int cTechEyesintheForest=164;</Command>
		<Command>const int cTechScallopedAxe=165;</Command>
		<Command>const int cTechRingGiver=166;</Command>
		<Command>const int cTechLongSerpent=167;</Command>
		<Command>const int cTechSwineArray=168;</Command>
		<Command>const int cTechAge15Norse=169;</Command>
		<Command>const int cTechAge15Greek=170;</Command>
		<Command>const int cTechOdinsRavenRespawn=171;</Command>
		<Command>const int cTechSnowStorm=172;</Command>
		<Command>const int cTechHeavyCamelry=173;</Command>
		<Command>const int cTechChampionCamelry=174;</Command>
		<Command>const int cTechBronze=175;</Command>
		<Command>const int cTechPharaohRespawnOsiris=176;</Command>
		<Command>const int cTechNewKingdom=177;</Command>
		<Command>const int cTechMedjay=178;</Command>
		<Command>const int cTechFuneralRites=179;</Command>
		<Command>const int cTechSpiritofMaat=180;</Command>
		<Command>const int cTechCityoftheDead=181;</Command>
		<Command>const int cTechFortifyTownCenter=182;</Command>
		<Command>const int cTechHeroesZeusAge2=183;</Command>
		<Command>const int cTechHeroesZeusAge3=184;</Command>
		<Command>const int cTechHeroesZeusAge4=185;</Command>
		<Command>const int cTechHeroesPoseidonAge2=186;</Command>
		<Command>const int cTechHeroesPoseidonAge3=187;</Command>
		<Command>const int cTechHeroesPoseidonAge4=188;</Command>
		<Command>const int cTechHeroesHadesAge2=189;</Command>
		<Command>const int cTechHeroesHadesAge3=190;</Command>
		<Command>const int cTechHeroesHadesAge4=191;</Command>
		<Command>const int cTechShaduf=192;</Command>
		<Command>const int cTechMonument0=193;</Command>
		<Command>const int cTechRelicAnkhofRa=194;</Command>
		<Command>const int cTechRelicEyeofHorus=195;</Command>
		<Command>const int cTechRelicSistrumofBast=196;</Command>
		<Command>const int cTechRelicHeadofOrpheus=197;</Command>
		<Command>const int cTechRelicRingoftheNibelung=198;</Command>
		<Command>const int cTechRelicStaffofDionysus=199;</Command>
		<Command>const int cTechRelicFettersofFenrir=200;</Command>
		<Command>const int cTechRelicOdinsSpear=201;</Command>
		<Command>const int cTechRelicKitharaofApollo=202;</Command>
		<Command>const int cTechRelicMithrilHorseshoes=203;</Command>
		<Command>const int cTechRelicBowofArtemis=204;</Command>
		<Command>const int cTechRelicWedjatEye=205;</Command>
		<Command>const int cTechRelicNoseoftheSphinx=206;</Command>
		<Command>const int cTechGoldenApples=207;</Command>
		<Command>const int cTechEldhrimnirKettle=208;</Command>
		<Command>const int cTechRelicArrowsofAlfar=209;</Command>
		<Command>const int cTechRelicToothedArrows=210;</Command>
		<Command>const int cTechRelicWandofGambantein=211;</Command>
		<Command>const int cTechProsperity=212;</Command>
		<Command>const int cTechPegasusRelicRespawn=213;</Command>
		<Command>const int cTechRelicGoldenBridleofPegasus=214;</Command>
		<Command>const int cTechEclipse=215;</Command>
		<Command>const int cTechWillofKronos=216;</Command>
		<Command>const int cTechLabyrinthofMinos=217;</Command>
		<Command>const int cTechFlamesofTyphon=218;</Command>
		<Command>const int cTechDivineBlood=219;</Command>
		<Command>const int cTechShaftsofPlague=220;</Command>
		<Command>const int cTechVision=221;</Command>
		<Command>const int cTechBolt=222;</Command>
		<Command>const int cTechSpy=223;</Command>
		<Command>const int cTechFlamingWeapons=224;</Command>
		<Command>const int cTechFlamingWeaponsActive=225;</Command>
		<Command>const int cTechLossofLOS=226;</Command>
		<Command>const int cTechSerpents=227;</Command>
		<Command>const int cTechAnimalMagnetism=228;</Command>
		<Command>const int cTechHealingSpring=229;</Command>
		<Command>const int cTechCurse=230;</Command>
		<Command>const int cTechSentinel=231;</Command>
		<Command>const int cTechSandstorm=232;</Command>
		<Command>const int cTechCitadel=233;</Command>
		<Command>const int cTechWalkingWoods=234;</Command>
		<Command>const int cTechRagnorok=235;</Command>
		<Command>const int cTechNidhogg=236;</Command>
		<Command>const int cTechPlenty=237;</Command>
		<Command>const int cTechSonofOsiris=238;</Command>
		<Command>const int cTechPharaohRespawnCityoftheDead=239;</Command>
		<Command>const int cTechEarthquake=240;</Command>
		<Command>const int cTechAthenianWall=241;</Command>
		<Command>const int cTechHeroesHadesAge1=242;</Command>
		<Command>const int cTechHeroesPoseidonAge1=243;</Command>
		<Command>const int cTechHeroesZeusAge1=244;</Command>
		<Command>const int cTechDwarvenAuger=245;</Command>
		<Command>const int cTechPurseSeine=246;</Command>
		<Command>const int cTechReinforcedHull=247;</Command>
		<Command>const int cTechHuntressAxe=248;</Command>
		<Command>const int cTechForestFire=249;</Command>
		<Command>const int cTechPestilence=250;</Command>
		<Command>const int cTechRelicTriosBow=251;</Command>
		<Command>const int cTechRelicShardofBlueCrystal=252;</Command>
		<Command>const int cTechRelicArmorofAchilles=253;</Command>
		<Command>const int cTechRelicShipofFingernails=254;</Command>
		<Command>const int cTechCrocodopolis=255;</Command>
		<Command>const int cTechLeatherFrameShield=256;</Command>
		<Command>const int cTechElectrumBullets=257;</Command>
		<Command>const int cTechStonesofRedLinen=258;</Command>
		<Command>const int cTechSpearontheHorizon=259;</Command>
		<Command>const int cTechFeral=260;</Command>
		<Command>const int cTechAnastrophe=261;</Command>
		<Command>const int cTechTrierarch=262;</Command>
		<Command>const int cTechThracianHorses=263;</Command>
		<Command>const int cTechRelicShinglesofSteel=264;</Command>
		<Command>const int cTechRelicEyeofOrnlu=265;</Command>
		<Command>const int cTechRelicTuskoftheIronBoar=266;</Command>
		<Command>const int cTechAssignLOS=267;</Command>
		<Command>const int cTechRoarofOrthus=268;</Command>
		<Command>const int cTechAtefCrown=269;</Command>
		<Command>const int cTechConscriptSailors=270;</Command>
		<Command>const int cTechNavalOxybeles=271;</Command>
		<Command>const int cTechEnyosBowofHorror=272;</Command>
		<Command>const int cTechDeimosSwordofDread=273;</Command>
		<Command>const int cTechChampionElephants=274;</Command>
		<Command>const int cTechHallofThanes=275;</Command>
		<Command>const int cTechAdzeofWepwawet=276;</Command>
		<Command>const int cTechSlingsoftheSun=277;</Command>
		<Command>const int cTechRamoftheWestWind=278;</Command>
		<Command>const int cTechSundriedMudBrick=279;</Command>
		<Command>const int cTechFuneralBarge=280;</Command>
		<Command>const int cTechNecropolis=281;</Command>
		<Command>const int cTechDisableArmoryforThor=282;</Command>
		<Command>const int cTechIronMailThor=283;</Command>
		<Command>const int cTechBronzeMailThor=284;</Command>
		<Command>const int cTechBronzeShieldsThor=285;</Command>
		<Command>const int cTechBronzeWeaponsThor=286;</Command>
		<Command>const int cTechIronShieldsThor=287;</Command>
		<Command>const int cTechIronWeaponsThor=288;</Command>
		<Command>const int cTechBurningPitchThor=289;</Command>
		<Command>const int cTechHammeroftheGods=290;</Command>
		<Command>const int cTechMeteoricIronMail=291;</Command>
		<Command>const int cTechDragonscaleShields=292;</Command>
		<Command>const int cTechTusksofApedemak=293;</Command>
		<Command>const int cTechRelicPandorasBox=294;</Command>
		<Command>const int cTechRelicHerasThundercloudShawl=295;</Command>
		<Command>const int cTechRelicHarmoniasNecklace=296;</Command>
		<Command>const int cTechRelicDwarfenCalipers=297;</Command>
		<Command>const int cTechOracle=298;</Command>
		<Command>const int cTechSonsofSleipnir=299;</Command>
		<Command>const int cTechSetAge2Critter=300;</Command>
		<Command>const int cTechSetAge3Critter=301;</Command>
		<Command>const int cTechSetAge4Critter=302;</Command>
		<Command>const int cTechPoseidonHippocampusRespawn=303;</Command>
		<Command>const int cTechEgyptianbuildingbonus=304;</Command>
		<Command>const int cTechOmniscience=305;</Command>
		<Command>const int cTechMediumAxemen=306;</Command>
		<Command>const int cTechHeavyAxemen=307;</Command>
		<Command>const int cTechChampionAxemen=308;</Command>
		<Command>const int cTechMediumSpearmen=309;</Command>
		<Command>const int cTechHeavySpearmen=310;</Command>
		<Command>const int cTechChampionSpearmen=311;</Command>
		<Command>const int cTechHeavyChariots=312;</Command>
		<Command>const int cTechChampionChariots=313;</Command>
		<Command>const int cTechHeavyElephants=314;</Command>
		<Command>const int cTechLevyBarracksSoldiers=315;</Command>
		<Command>const int cTechConscriptBarracksSoldiers=316;</Command>
		<Command>const int cTechLevyMigdolSoldiers=317;</Command>
		<Command>const int cTechConscriptMigdolSoldiers=318;</Command>
		<Command>const int cTechMediumSlingers=319;</Command>
		<Command>const int cTechHeavySlingers=320;</Command>
		<Command>const int cTechChampionSlingers=321;</Command>
		<Command>const int cTechRelicGoldenLions=322;</Command>
		<Command>const int cTechRelicMonkeyHead=323;</Command>
		<Command>const int cTechLevyLonghouseSoldiers=324;</Command>
		<Command>const int cTechConscriptLonghouseSoldiers=325;</Command>
		<Command>const int cTechConscriptHillFortSoldiers=326;</Command>
		<Command>const int cTechLevyHillFortSoldiers=327;</Command>
		<Command>const int cTechThurisazRune=328;</Command>
		<Command>const int cTechGoldenLionsRelicRespawn=329;</Command>
		<Command>const int cTechMonkeyHeadRelicRespawn=330;</Command>
		<Command>const int cTechRelicCanopicJarofImsety=331;</Command>
		<Command>const int cTechRelicTowerofSestus=332;</Command>
		<Command>const int cTechRelicTrojanGateHinge=333;</Command>
		<Command>const int cTechSPCMeteor=334;</Command>
		<Command>const int cTechOdinsFirstRavens=335;</Command>
		<Command>const int cTechHeroesEgyptianAge1=336;</Command>
		<Command>const int cTechWeakenAge1Units=337;</Command>
		<Command>const int cTechSaltAmphora=338;</Command>
		<Command>const int cTechMediumMigdolShadow=339;</Command>
		<Command>const int cTechPoseidonFirstHippocampus=340;</Command>
		<Command>const int cTechTempleofHealing=341;</Command>
		<Command>const int cTechGreatestofFifty=342;</Command>
		<Command>const int cTechCopperMailThor=343;</Command>
		<Command>const int cTechCopperShieldsThor=344;</Command>
		<Command>const int cTechCopperWeaponsThor=345;</Command>
		<Command>const int cTechWeaponoftheTitans=346;</Command>
		<Command>const int cTechAge2Fake=347;</Command>
		<Command>const int cTechAge3Fake=348;</Command>
		<Command>const int cTechAge4Fake=349;</Command>
		<Command>const int cTechCrenellations=350;</Command>
		<Command>const int cTechBlessingofZeus=351;</Command>
		<Command>const int cTechRelicGirdleofHippolyta=352;</Command>
		<Command>const int cTechSharedLOS=353;</Command>
		<Command>const int cTechRelicPygmalionsStatue=354;</Command>
		<Command>const int cTechRelicBlackLotus=355;</Command>
		<Command>const int cTechDeathmatchGreek=356;</Command>
		<Command>const int cTechDeathmatchEgyptian=357;</Command>
		<Command>const int cTechDeathmatchNorse=358;</Command>
		<Command>const int cTechCeasefireEffect=359;</Command>
		<Command>const int cTechNorsebuildingbonus=360;</Command>
		<Command>const int cTechLightningMode=361;</Command>
		<Command>const int cTechFortifiedTents=362;</Command>
		<Command>const int cTechDwarvenShieldsEffect=363;</Command>
		<Command>const int cTechRelicHartersFolly=364;</Command>
		<Command>const int cTechRelicScarabPendant=365;</Command>
		<Command>const int cTechWellofUrd=366;</Command>
		<Command>const int cTechRelicBootsofKickEverything=367;</Command>
		<Command>const int cTechRelicAnvilofHephaestus=368;</Command>
		<Command>const int cTechRelicPeltofArgus=369;</Command>
		<Command>const int cTechRelicOsebergWagon=370;</Command>
		<Command>const int cTechRelicBuhenFlagstone=371;</Command>
		<Command>const int cTechRelicCatoblepasScales=372;</Command>
		<Command>const int cTechRelicTailofCerberus=373;</Command>
		<Command>const int cTechRelicBlanketofEmpressZoe=374;</Command>
		<Command>const int cTechRelicKhopeshofHorus=375;</Command>
		<Command>const int cTechCeaseFireNomad=376;</Command>
		<Command>const int cTechEclipseActive=377;</Command>
		<Command>const int cTechPlentyKOTHenable=378;</Command>
		<Command>const int cTechStartingUnitsThor=379;</Command>
		<Command>const int cTechSetAge1Critter=380;</Command>
		<Command>const int cTechStartingResourcesEgyptian=381;</Command>
		<Command>const int cTechStartingResourcesGreek=382;</Command>
		<Command>const int cTechStartingResourcesNorse=383;</Command>
		<Command>const int cTechRelicReedofNekhebet=384;</Command>
		<Command>const int cTechWeakenTrojanGate=385;</Command>
		<Command>const int cTechBuildTCfaster=386;</Command>
		<Command>const int cTechIncreaseRegeneration=387;</Command>
		<Command>const int cTechChickenStorm=388;</Command>
		<Command>const int cTechWalkingBerryBushes=389;</Command>
		<Command>const int cTechEliteHersir=390;</Command>
		<Command>const int cTechGoatunheim=391;</Command>
		<Command>const int cTechAge1Kronos=392;</Command>
		<Command>const int cTechAge1Gaia=393;</Command>
		<Command>const int cTechStartingUnitsAtlantean=394;</Command>
		<Command>const int cTechAge1Ouranos=395;</Command>
		<Command>const int cTechStartingResourcesAtlantean=396;</Command>
		<Command>const int cTechAge2Okeanus=397;</Command>
		<Command>const int cTechAge2Prometheus=398;</Command>
		<Command>const int cTechAge2Leto=399;</Command>
		<Command>const int cTechAge3Hyperion=400;</Command>
		<Command>const int cTechAge3Rheia=401;</Command>
		<Command>const int cTechAge3Theia=402;</Command>
		<Command>const int cTechAge4Helios=403;</Command>
		<Command>const int cTechAge4Hekate=404;</Command>
		<Command>const int cTechAge4Atlas=405;</Command>
		<Command>const int cTechReverseTime=406;</Command>
		<Command>const int cTechAudrey=407;</Command>
		<Command>const int cTechTraitors=408;</Command>
		<Command>const int cTechChaos=409;</Command>
		<Command>const int cTechVolcano=410;</Command>
		<Command>const int cTechBronzeWall=411;</Command>
		<Command>const int cTechIronWall=412;</Command>
		<Command>const int cTechOreichalkosWall=413;</Command>
		<Command>const int cTechTremor=414;</Command>
		<Command>const int cTechHeavyFireship=415;</Command>
		<Command>const int cTechHeartoftheTitans=416;</Command>
		<Command>const int cTechHephaestusRevenge=417;</Command>
		<Command>const int cTechGaiaForest=418;</Command>
		<Command>const int cTechTartarianGate=419;</Command>
		<Command>const int cTechLevyMainlineUnits=420;</Command>
		<Command>const int cTechLevySpecialtyUnits=421;</Command>
		<Command>const int cTechLevyPalaceUnits=422;</Command>
		<Command>const int cTechConscriptMainlineUnits=423;</Command>
		<Command>const int cTechConscriptSpecialtyUnits=424;</Command>
		<Command>const int cTechConscriptPalaceUnits=425;</Command>
		<Command>const int cTechHalooftheSun=426;</Command>
		<Command>const int cTechHornsofConsecration=427;</Command>
		<Command>const int cTechLemurianDescendants=428;</Command>
		<Command>const int cTechChannels=429;</Command>
		<Command>const int cTechAlluvialClay=430;</Command>
		<Command>const int cTechVortex=431;</Command>
		<Command>const int cTechMythicRejuvenation=432;</Command>
		<Command>const int cTechHeroicRenewal=433;</Command>
		<Command>const int cTechReverseWonder=434;</Command>
		<Command>const int cTechBiteoftheShark=435;</Command>
		<Command>const int cTechHesperides=436;</Command>
		<Command>const int cTechHeavyChieroballista=437;</Command>
		<Command>const int cTechSpiders=438;</Command>
		<Command>const int cTechHeroize=439;</Command>
		<Command>const int cTechGemino=440;</Command>
		<Command>const int cTechNorseArmory=441;</Command>
		<Command>const int cTechImplode=442;</Command>
		<Command>const int cTechSecretsoftheTitans=443;</Command>
		<Command>const int cTechTitanGate=444;</Command>
		<Command>const int cTechDisableTitan=445;</Command>
		<Command>const int cTechFocus=446;</Command>
		<Command>const int cTechSafePassage=447;</Command>
		<Command>const int cTechHeroicFleet=448;</Command>
		<Command>const int cTechWeightlessMace=449;</Command>
		<Command>const int cTechEyesofAtlas=450;</Command>
		<Command>const int cTechAsperBlood=451;</Command>
		<Command>const int cTechTitanShield=452;</Command>
		<Command>const int cTechPoseidonsSecret=453;</Command>
		<Command>const int cTechRelicWhirlwindSPC=454;</Command>
		<Command>const int cTechRelicofBronzeSPC=455;</Command>
		<Command>const int cTechRelicofEarthquakeSPC=456;</Command>
		<Command>const int cTechBronzeXP05=457;</Command>
		<Command>const int cTechTornadoXP05=458;</Command>
		<Command>const int cTechRelicTitansTreasure=459;</Command>
		<Command>const int cTechVolcanicForge=460;</Command>
		<Command>const int cTechRelicGaiasBookofKnowledge=461;</Command>
		<Command>const int cTechChangeCyclops=462;</Command>
		<Command>const int cTechChangeChimera=463;</Command>
		<Command>const int cTechChangeCaladria=464;</Command>
		<Command>const int cTechChangeManticore=465;</Command>
		<Command>const int cTechChangeNemean=466;</Command>
		<Command>const int cTechChangeHydra=467;</Command>
		<Command>const int cTechSPCLightningStorm=468;</Command>
		<Command>const int cTechDeathmatchAtlantean=469;</Command>
		<Command>const int cTechMailofOrichalkos=470;</Command>
		<Command>const int cTechHandsofthePharaoh=471;</Command>
		<Command>const int cTechBronzeAll=472;</Command>
		<Command>const int cTechBronzeAllThor=473;</Command>
		<Command>const int cTechCopperAll=474;</Command>
		<Command>const int cTechCopperAllThor=475;</Command>
		<Command>const int cTechIronAll=476;</Command>
		<Command>const int cTechIronAllThor=477;</Command>
		<Command>const int cTechMediumAll=478;</Command>
		<Command>const int cTechHeavyAll=479;</Command>
		<Command>const int cTechChampionAll=480;</Command>
		<Command>const int cTechRheiasGift=481;</Command>
		<Command>const int cTechTimeShiftFake=482;</Command>
		<Command>const int cTechFocusTurbo=483;</Command>
		<Command>const int cTechCelerity=484;</Command>
		<Command>const int cTechSeedofGaia=485;</Command>
		<Command>const int cTechGrantPhoenixEgg=486;</Command>
		<Command>const int cTechIoGuardian=487;</Command>
		<Command>const int cTechDisableAtlanteanFavor=488;</Command>
		<Command>const int cTechTimeShiftFake2=489;</Command>
		<Command>const int cTechAxeofMuspell=490;</Command>
		<Command>const int cTechChampionChieroballista=491;</Command>
		<Command>const int cTechTraitorsSPC=492;</Command>
		<Command>const int cTechSuperRocs=493;</Command>
		<Command>const int cTechBeastSlayer=494;</Command>
		<Command>const int cTechLanceofStone=495;</Command>
		<Command>const int cTechSuddenDeathAtlantean=496;</Command>
		<Command>const int cTechRelicofAncestorsSPC=497;</Command>
		<Command>const int cTechSuperTitanSPC=498;</Command>
		<Command>const int cTechSuperNidhoggSPC=499;</Command>
		<Command>const int cTechPetrified=500;</Command>
		<Command>const int cTechPrometheusWeak=501;</Command>
		<Command>const int cTechPrometheusWeakest=502;</Command>
		<Command>const int cTechAge2AtlanteanHeroes=503;</Command>
		<Command>const int cTechAge4AtlanteanHeroes=504;</Command>
		<Command>const int cTechAge15Atlantean=505;</Command>
		<Command>const int cTechGaiaForestSPC=506;</Command>
		<Command>//Unit Types: 995 total.</Command>
		<Command>const int cUnitTypeHawk=0;</Command>
		<Command>const int cUnitTypePalmStump=1;</Command>
		<Command>const int cUnitTypeBush=2;</Command>
		<Command>const int cUnitTypeArrow=3;</Command>
		<Command>const int cUnitTypeAxe=4;</Command>
		<Command>const int cUnitTypeBlood=5;</Command>
		<Command>const int cUnitTypeScarabBlood=6;</Command>
		<Command>const int cUnitTypeWaypointFlag=7;</Command>
		<Command>const int cUnitTypeMoveto=8;</Command>
		<Command>const int cUnitTypeTestObject=9;</Command>
		<Command>const int cUnitTypeYardstick=10;</Command>
		<Command>const int cUnitTypeSmoke=11;</Command>
		<Command>const int cUnitTypeCloud=12;</Command>
		<Command>const int cUnitTypeTornado=13;</Command>
		<Command>const int cUnitTypeRevealer=14;</Command>
		<Command>const int cUnitTypeAttackRevealer=15;</Command>
		<Command>const int cUnitTypeConstructionSmall=16;</Command>
		<Command>const int cUnitTypeConstructionMedium=17;</Command>
		<Command>const int cUnitTypeConstructionLarge=18;</Command>
		<Command>const int cUnitTypeConstructionExtraLarge=19;</Command>
		<Command>const int cUnitTypeIceBlock=20;</Command>
		<Command>const int cUnitTypePapyrus=21;</Command>
		<Command>const int cUnitTypeWave=22;</Command>
		<Command>const int cUnitTypeRainfall=23;</Command>
		<Command>const int cUnitTypeIceSheet=24;</Command>
		<Command>const int cUnitTypeCamera=25;</Command>
		<Command>const int cUnitTypeCameraMotionArrow=26;</Command>
		<Command>const int cUnitTypeCameraStart=27;</Command>
		<Command>const int cUnitTypeWhale=28;</Command>
		<Command>const int cUnitTypeFirePit=29;</Command>
		<Command>const int cUnitTypeRockSymbols=30;</Command>
		<Command>const int cUnitTypeStalagmite=31;</Command>
		<Command>const int cUnitTypeRunestone=32;</Command>
		<Command>const int cUnitTypeRockSnow=33;</Command>
		<Command>const int cUnitTypeWaterLilly=34;</Command>
		<Command>const int cUnitTypeWaterReeds=35;</Command>
		<Command>const int cUnitTypeSnowfall=36;</Command>
		<Command>const int cUnitTypeMist=37;</Command>
		<Command>const int cUnitTypeWaterfall=38;</Command>
		<Command>const int cUnitTypeGarrisonFlag=39;</Command>
		<Command>const int cUnitTypeCrate=40;</Command>
		<Command>const int cUnitTypeRugs=41;</Command>
		<Command>const int cUnitTypeMarketStall=42;</Command>
		<Command>const int cUnitTypeCatapultShot=43;</Command>
		<Command>const int cUnitTypeMiscObjects=44;</Command>
		<Command>const int cUnitTypeInfernoFireGround=45;</Command>
		<Command>const int cUnitTypeLightningStrike=46;</Command>
		<Command>const int cUnitTypeBallistaShot=47;</Command>
		<Command>const int cUnitTypeSplash=48;</Command>
		<Command>const int cUnitTypeMiscStairs=49;</Command>
		<Command>const int cUnitTypeCoralReef=50;</Command>
		<Command>const int cUnitTypeHeroBirth=51;</Command>
		<Command>const int cUnitTypeCinematicBlock=52;</Command>
		<Command>const int cUnitTypeFootprintVillager=53;</Command>
		<Command>const int cUnitTypeFlamingFootprint=54;</Command>
		<Command>const int cUnitTypeIcyFootprint=55;</Command>
		<Command>const int cUnitTypeOarFootprint=56;</Command>
		<Command>const int cUnitTypeMeteor=57;</Command>
		<Command>const int cUnitTypeLightningsparks=58;</Command>
		<Command>const int cUnitTypeLightningScorch=59;</Command>
		<Command>const int cUnitTypeDustSmall=60;</Command>
		<Command>const int cUnitTypeDustMedium=61;</Command>
		<Command>const int cUnitTypeDustLarge=62;</Command>
		<Command>const int cUnitTypeArrowFlaming=63;</Command>
		<Command>const int cUnitTypeLightningCloud=64;</Command>
		<Command>const int cUnitTypeLightningRain=65;</Command>
		<Command>const int cUnitTypeUIArmyBannerFurled=66;</Command>
		<Command>const int cUnitTypeUIArmyBannerPlain=67;</Command>
		<Command>const int cUnitTypeUIArmyBannerInfantry=68;</Command>
		<Command>const int cUnitTypeUIArmyBannerCavalry=69;</Command>
		<Command>const int cUnitTypeUIArmyBannerArcher=70;</Command>
		<Command>const int cUnitTypeUIArmyBannerVillager=71;</Command>
		<Command>const int cUnitTypeBloodGore=72;</Command>
		<Command>const int cUnitTypeLightningSparksGround=73;</Command>
		<Command>const int cUnitTypeHoofprint=74;</Command>
		<Command>const int cUnitTypeFootprintMilitary=75;</Command>
		<Command>const int cUnitTypeFireObject=76;</Command>
		<Command>const int cUnitTypeUIHeroBanner=77;</Command>
		<Command>const int cUnitTypeUIIdleVillagerBanner=78;</Command>
		<Command>const int cUnitTypeGiantFootprint=79;</Command>
		<Command>const int cUnitTypeShark=80;</Command>
		<Command>const int cUnitTypeOrca=81;</Command>
		<Command>const int cUnitTypeRockGraniteSmall=82;</Command>
		<Command>const int cUnitTypeRockLimestoneSmall=83;</Command>
		<Command>const int cUnitTypeGrass=84;</Command>
		<Command>const int cUnitTypeSeagull=85;</Command>
		<Command>const int cUnitTypeRockGraniteBig=86;</Command>
		<Command>const int cUnitTypeRockLimestoneBig=87;</Command>
		<Command>const int cUnitTypeRockSandstoneBig=88;</Command>
		<Command>const int cUnitTypeRockSandstoneSmall=89;</Command>
		<Command>const int cUnitTypeRockRiverSandy=90;</Command>
		<Command>const int cUnitTypeRockRiverGrassy=91;</Command>
		<Command>const int cUnitTypeRockRiverIcy=92;</Command>
		<Command>const int cUnitTypeShiftingSandsIn=93;</Command>
		<Command>const int cUnitTypeUIArmyBannerMyth=94;</Command>
		<Command>const int cUnitTypeUIIdleMilitaryBanner=95;</Command>
		<Command>const int cUnitTypeHeavenlight=96;</Command>
		<Command>const int cUnitTypeShiftingSandsOut=97;</Command>
		<Command>const int cUnitTypeShiftingSandsOutEffect=98;</Command>
		<Command>const int cUnitTypeInfernoUnitFlame=99;</Command>
		<Command>const int cUnitTypeRevealertoPlayer=100;</Command>
		<Command>const int cUnitTypeSkeleton=101;</Command>
		<Command>const int cUnitTypeSandDriftDune=102;</Command>
		<Command>const int cUnitTypeSandDriftPlain=103;</Command>
		<Command>const int cUnitTypeSandDriftPatch=104;</Command>
		<Command>const int cUnitTypeHealingSFX=105;</Command>
		<Command>const int cUnitTypeHealingAreaSFX=106;</Command>
		<Command>const int cUnitTypeFrostDrift=107;</Command>
		<Command>const int cUnitTypeDustDevil=108;</Command>
		<Command>const int cUnitTypeFountain=109;</Command>
		<Command>const int cUnitTypeFireWood=110;</Command>
		<Command>const int cUnitTypeCampfire=111;</Command>
		<Command>const int cUnitTypeColumns=112;</Command>
		<Command>const int cUnitTypeColumnsFallen=113;</Command>
		<Command>const int cUnitTypeColumnsBroken=114;</Command>
		<Command>const int cUnitTypeMilestone=115;</Command>
		<Command>const int cUnitTypeSign=116;</Command>
		<Command>const int cUnitTypeCloneSFX=117;</Command>
		<Command>const int cUnitTypeInvisibleRam=118;</Command>
		<Command>const int cUnitTypeSpear=119;</Command>
		<Command>const int cUnitTypeSlingStone=120;</Command>
		<Command>const int cUnitTypeRain=121;</Command>
		<Command>const int cUnitTypeSnowStorm=122;</Command>
		<Command>const int cUnitTypeFertilePlantsSFX=123;</Command>
		<Command>const int cUnitTypeCinematicrocks=124;</Command>
		<Command>const int cUnitTypeCinematicTrees=125;</Command>
		<Command>const int cUnitTypeCinematicDeadBodies=126;</Command>
		<Command>const int cUnitTypeDestroyedBuildingsSmall=127;</Command>
		<Command>const int cUnitTypeCinematicScorch=128;</Command>
		<Command>const int cUnitTypeunderminegrounddecallong=129;</Command>
		<Command>const int cUnitTypeunderminegrounddecalshort=130;</Command>
		<Command>const int cUnitTypeunderminegrounddecalcorner=131;</Command>
		<Command>const int cUnitTypeArmorGlowSmall=132;</Command>
		<Command>const int cUnitTypeTornadoDebris=133;</Command>
		<Command>const int cUnitTypeRaft=134;</Command>
		<Command>const int cUnitTypeMeteorImpactWater=135;</Command>
		<Command>const int cUnitTypeMeteorImpactGround=136;</Command>
		<Command>const int cUnitTypeRainSmall=137;</Command>
		<Command>const int cUnitTypeBallofFire=138;</Command>
		<Command>const int cUnitTypeIncreaseProsperityLarge=139;</Command>
		<Command>const int cUnitTypeIncreaseProsperitySmall=140;</Command>
		<Command>const int cUnitTypeBalloffireimpact=141;</Command>
		<Command>const int cUnitTypeDove=142;</Command>
		<Command>const int cUnitTypeSnowDriftArchery=143;</Command>
		<Command>const int cUnitTypeSnowDriftBarracks=144;</Command>
		<Command>const int cUnitTypeSnowDriftStable=145;</Command>
		<Command>const int cUnitTypeSnowDriftSettlements=146;</Command>
		<Command>const int cUnitTypeSnowDriftTower=147;</Command>
		<Command>const int cUnitTypeSnowDriftSiege=148;</Command>
		<Command>const int cUnitTypeSnowDriftMajorTemple=149;</Command>
		<Command>const int cUnitTypeTunnelOpening=150;</Command>
		<Command>const int cUnitTypeVolley=151;</Command>
		<Command>const int cUnitTypeHadesFire=152;</Command>
		<Command>const int cUnitTypeRockGraniteSprite=153;</Command>
		<Command>const int cUnitTypeVisionRevealer=154;</Command>
		<Command>const int cUnitTypeBoltStrike=155;</Command>
		<Command>const int cUnitTypeSpyEye=156;</Command>
		<Command>const int cUnitTypeCurseSFX=157;</Command>
		<Command>const int cUnitTypeSentinelBase=158;</Command>
		<Command>const int cUnitTypeBoltScorch=159;</Command>
		<Command>const int cUnitTypeCitadelSFX=160;</Command>
		<Command>const int cUnitTypeVisionSFX=161;</Command>
		<Command>const int cUnitTypeRagnorokSFX=162;</Command>
		<Command>const int cUnitTypeFimbulwinterSFX=163;</Command>
		<Command>const int cUnitTypePlentyFlare=164;</Command>
		<Command>const int cUnitTypeOsirisLightning=165;</Command>
		<Command>const int cUnitTypeOsirisSFX=166;</Command>
		<Command>const int cUnitTypePriestProjectile=167;</Command>
		<Command>const int cUnitTypeUIArmyBannerSiege=168;</Command>
		<Command>const int cUnitTypeRockLimestoneSprite=169;</Command>
		<Command>const int cUnitTypeRockSandstoneSprite=170;</Command>
		<Command>const int cUnitTypePineStump=171;</Command>
		<Command>const int cUnitTypeOakstump=172;</Command>
		<Command>const int cUnitTypeEarthquake=173;</Command>
		<Command>const int cUnitTypeBarrel=174;</Command>
		<Command>const int cUnitTypePots=175;</Command>
		<Command>const int cUnitTypeBrokenSiegeWeapons=176;</Command>
		<Command>const int cUnitTypeKrakenBits=177;</Command>
		<Command>const int cUnitTypeFlowers=178;</Command>
		<Command>const int cUnitTypeSeaweed=179;</Command>
		<Command>const int cUnitTypeFern=180;</Command>
		<Command>const int cUnitTypeFlagNumbered=181;</Command>
		<Command>const int cUnitTypeScorpionTail=182;</Command>
		<Command>const int cUnitTypeGenericCorpse=183;</Command>
		<Command>const int cUnitTypeWadjetSpit=184;</Command>
		<Command>const int cUnitTypeHeroDeath=185;</Command>
		<Command>const int cUnitTypePetosuchusBeam=186;</Command>
		<Command>const int cUnitTypeEarthquakeCrackA=187;</Command>
		<Command>const int cUnitTypeEarthquakeCrackB=188;</Command>
		<Command>const int cUnitTypeEarthquakeCrackC=189;</Command>
		<Command>const int cUnitTypeEarthquakeCrackD=190;</Command>
		<Command>const int cUnitTypeForestFireSFX=191;</Command>
		<Command>const int cUnitTypePetosuchusprojectile=192;</Command>
		<Command>const int cUnitTypeRecognizer=193;</Command>
		<Command>const int cUnitTypeManticoreBarb=194;</Command>
		<Command>const int cUnitTypeArrowSplashSFX=195;</Command>
		<Command>const int cUnitTypePetrobolosShot=196;</Command>
		<Command>const int cUnitTypeUITownBellBanner=197;</Command>
		<Command>const int cUnitTypePestilenceSFX1=198;</Command>
		<Command>const int cUnitTypePestilenceSFX2=199;</Command>
		<Command>const int cUnitTypeHeroDeathRevealer=200;</Command>
		<Command>const int cUnitTypeTestomatic=201;</Command>
		<Command>const int cUnitTypeGateRamDestroyed=202;</Command>
		<Command>const int cUnitTypeSpearFlaming=203;</Command>
		<Command>const int cUnitTypeDestroyedBuildingsMed=204;</Command>
		<Command>const int cUnitTypeDestroyedBuildingsLarge=205;</Command>
		<Command>const int cUnitTypeOsiris=206;</Command>
		<Command>const int cUnitTypeSPCMeteor=207;</Command>
		<Command>const int cUnitTypeAvalanche=208;</Command>
		<Command>const int cUnitTypeEinheriarBoostSFX=209;</Command>
		<Command>const int cUnitTypeArrowSignal=210;</Command>
		<Command>const int cUnitTypeOsirisBirth=211;</Command>
		<Command>const int cUnitTypeOsirisBoxGlow=212;</Command>
		<Command>const int cUnitTypeUIBannerObjective=213;</Command>
		<Command>const int cUnitTypeOakstumpburnt=214;</Command>
		<Command>const int cUnitTypeFireObjectBig=215;</Command>
		<Command>const int cUnitTypeSmokeBig=216;</Command>
		<Command>const int cUnitTypeUIArmyBannerHero=217;</Command>
		<Command>const int cUnitTypeMummyFlies=218;</Command>
		<Command>const int cUnitTypeVulture=219;</Command>
		<Command>const int cUnitTypeConversionSFX=220;</Command>
		<Command>const int cUnitTypeUIArmyBannerNaval=221;</Command>
		<Command>const int cUnitTypeFireHades=222;</Command>
		<Command>const int cUnitTypeDestruction3x3=223;</Command>
		<Command>const int cUnitTypeDestruction4x4=224;</Command>
		<Command>const int cUnitTypeDestruction5x5=225;</Command>
		<Command>const int cUnitTypeDestruction8x8=226;</Command>
		<Command>const int cUnitTypeThorhammer=227;</Command>
		<Command>const int cUnitTypeRegenerationSFX=228;</Command>
		<Command>const int cUnitTypePoisonSFX=229;</Command>
		<Command>const int cUnitTypeTaprootlarge=230;</Command>
		<Command>const int cUnitTypeTaprootSmall=231;</Command>
		<Command>const int cUnitTypeShadow=232;</Command>
		<Command>const int cUnitTypeDestructionSettlement=233;</Command>
		<Command>const int cUnitTypeDestruction2x2=234;</Command>
		<Command>const int cUnitTypeDestruction1x1=235;</Command>
		<Command>const int cUnitTypeUIArmyBannerCaravan=236;</Command>
		<Command>const int cUnitTypeUIArmyBannerOxcart=237;</Command>
		<Command>const int cUnitTypeMInePieces=238;</Command>
		<Command>const int cUnitTypeUnderworldSmoke=239;</Command>
		<Command>const int cUnitTypeUnderworldExplosion=240;</Command>
		<Command>const int cUnitTypeUICloudBoarder=241;</Command>
		<Command>const int cUnitTypeBloodCinematic=242;</Command>
		<Command>const int cUnitTypeSkeletonGiant=243;</Command>
		<Command>const int cUnitTypeSkeletonAnimal=244;</Command>
		<Command>const int cUnitTypeShipwreck=245;</Command>
		<Command>const int cUnitTypeRuins=246;</Command>
		<Command>const int cUnitTypeRottingLog=247;</Command>
		<Command>const int cUnitTypeUnderbrush=248;</Command>
		<Command>const int cUnitTypeGrassTall=249;</Command>
		<Command>const int cUnitTypeRockCliff=250;</Command>
		<Command>const int cUnitTypeUIRangeIndicatorEgyptSFX=251;</Command>
		<Command>const int cUnitTypeHarpy=252;</Command>
		<Command>const int cUnitTypeBlowingLeaves=253;</Command>
		<Command>const int cUnitTypeHawksbill=254;</Command>
		<Command>const int cUnitTypeBloodFlow=255;</Command>
		<Command>const int cUnitTypeBallofFireinvisible=256;</Command>
		<Command>const int cUnitTypeSplashFootprint=257;</Command>
		<Command>const int cUnitTypeLavaBubbling=258;</Command>
		<Command>const int cUnitTypeWoodPile1=259;</Command>
		<Command>const int cUnitTypeWoodPile2=260;</Command>
		<Command>const int cUnitTypeWoodPile3=261;</Command>
		<Command>const int cUnitTypeTrident=262;</Command>
		<Command>const int cUnitTypeDestructionCitadel=263;</Command>
		<Command>const int cUnitTypeForestFireAttack=264;</Command>
		<Command>const int cUnitTypeUIRangeIndicatorGreekSFX=265;</Command>
		<Command>const int cUnitTypeUIRangeIndicatorNorseSFX=266;</Command>
		<Command>const int cUnitTypeInvisibleGate=267;</Command>
		<Command>const int cUnitTypeUIArmyBannerBuilding=268;</Command>
		<Command>const int cUnitTypeWaterdecoration=269;</Command>
		<Command>const int cUnitTypeFootprintCavalry=270;</Command>
		<Command>const int cUnitTypeFootprintAnimalLarge=271;</Command>
		<Command>const int cUnitTypeFootprintAnimalSmall=272;</Command>
		<Command>const int cUnitTypeFootprintSiege=273;</Command>
		<Command>const int cUnitTypeEvilCloudSFX=274;</Command>
		<Command>const int cUnitTypeSmokeGiant=275;</Command>
		<Command>const int cUnitTypeCrateSmall=276;</Command>
		<Command>const int cUnitTypeCinematicWake=277;</Command>
		<Command>const int cUnitTypeWeapons=278;</Command>
		<Command>const int cUnitTypeFootprintGiant=279;</Command>
		<Command>const int cUnitTypeFootprintElephant=280;</Command>
		<Command>const int cUnitTypeFootprintWheel=281;</Command>
		<Command>const int cUnitTypeFootprintHydra=282;</Command>
		<Command>const int cUnitTypeFootprintPortableRam=283;</Command>
		<Command>const int cUnitTypeFootprintScorpion=284;</Command>
		<Command>const int cUnitTypeFootprintScarab=285;</Command>
		<Command>const int cUnitTypeSavannahstump=286;</Command>
		<Command>const int cUnitTypeChickenBlood=287;</Command>
		<Command>const int cUnitTypeCrabBlood=288;</Command>
		<Command>const int cUnitTypeArkantosBoostSFX=289;</Command>
		<Command>const int cUnitTypeTremor=290;</Command>
		<Command>const int cUnitTypeMeteorite=291;</Command>
		<Command>const int cUnitTypeIceberg=292;</Command>
		<Command>const int cUnitTypeGaiaCreepFlowers=293;</Command>
		<Command>const int cUnitTypeDeconstructUnit=294;</Command>
		<Command>const int cUnitTypeDeconstructBuilding=295;</Command>
		<Command>const int cUnitTypeChaoseffect=296;</Command>
		<Command>const int cUnitTypeTraitorseffect=297;</Command>
		<Command>const int cUnitTypeMeteoritedeath=298;</Command>
		<Command>const int cUnitTypeMarshBrush=299;</Command>
		<Command>const int cUnitTypeTundraBrush=300;</Command>
		<Command>const int cUnitTypeAudreyBase=301;</Command>
		<Command>const int cUnitTypeAudreyWaterBase=302;</Command>
		<Command>const int cUnitTypeVortexstart=303;</Command>
		<Command>const int cUnitTypeVortexfinish=304;</Command>
		<Command>const int cUnitTypeMarshstump=305;</Command>
		<Command>const int cUnitTypeTundrastump=306;</Command>
		<Command>const int cUnitTypeFireballLaunchDamageEffect=307;</Command>
		<Command>const int cUnitTypeSpider=308;</Command>
		<Command>const int cUnitTypeImplodeSphere=309;</Command>
		<Command>const int cUnitTypeImplodeSphereEffect=310;</Command>
		<Command>const int cUnitTypeImplodeLightningEffect=311;</Command>
		<Command>const int cUnitTypeImplodePullEffect=312;</Command>
		<Command>const int cUnitTypeJavelinFlaming=313;</Command>
		<Command>const int cUnitTypeImplodeShockwave=314;</Command>
		<Command>const int cUnitTypeSpiderDoor=315;</Command>
		<Command>const int cUnitTypeLampadesBlood=316;</Command>
		<Command>const int cUnitTypeAcidPool=317;</Command>
		<Command>const int cUnitTypeSpiderWarn=318;</Command>
		<Command>const int cUnitTypeGaiaForesteffect=319;</Command>
		<Command>const int cUnitTypeVortexstartlinked=320;</Command>
		<Command>const int cUnitTypeVortexfinishlinked=321;</Command>
		<Command>const int cUnitTypeVortexlanding=322;</Command>
		<Command>const int cUnitTypeImplodeDebris=323;</Command>
		<Command>const int cUnitTypeTitanAtlanteanFootprint=324;</Command>
		<Command>const int cUnitTypeTimeshiftout=325;</Command>
		<Command>const int cUnitTypeTimeshiftin=326;</Command>
		<Command>const int cUnitTypeTartarianGateflame=327;</Command>
		<Command>const int cUnitTypeHekaShockwaveSFX=328;</Command>
		<Command>const int cUnitTypeTartarianGatecreatureeffect=329;</Command>
		<Command>const int cUnitTypeGarrisonFlagSkyPassage=330;</Command>
		<Command>const int cUnitTypeLampadesBolt=331;</Command>
		<Command>const int cUnitTypeFireSiphonFire=332;</Command>
		<Command>const int cUnitTypeStymphBirdFeather=333;</Command>
		<Command>const int cUnitTypeOsirisPyramidDead=334;</Command>
		<Command>const int cUnitTypeRocket=335;</Command>
		<Command>const int cUnitTypeUIRangeIndicatorAtlanteanSFX=336;</Command>
		<Command>const int cUnitTypeTowerMirrorFocuser=337;</Command>
		<Command>const int cUnitTypeKronnyBirth=338;</Command>
		<Command>const int cUnitTypeMistOlympus=339;</Command>
		<Command>const int cUnitTypeSeagullHigh=340;</Command>
		<Command>const int cUnitTypeSeagullLow=341;</Command>
		<Command>const int cUnitTypeRepeatFlag=342;</Command>
		<Command>const int cUnitTypeBallofFirePrometheus=343;</Command>
		<Command>const int cUnitTypeShockwavestuneffect=344;</Command>
		<Command>const int cUnitTypeArkantosGodOut=345;</Command>
		<Command>const int cUnitTypeOlympusTempleSFX=346;</Command>
		<Command>const int cUnitTypeKronnyBirthSFX=347;</Command>
		<Command>const int cUnitTypeLavaSheet=348;</Command>
		<Command>const int cUnitTypeSoundGaiaSFX=349;</Command>
		<Command>const int cUnitTypeFootprintPrometheanbig=350;</Command>
		<Command>const int cUnitTypeFootprintPrometheansmall=351;</Command>
		<Command>const int cUnitTypeCinematicDeadBodiesXpack=352;</Command>
		<Command>const int cUnitTypeTartarianRubble=353;</Command>
		<Command>const int cUnitTypeTitanDeath=354;</Command>
		<Command>const int cUnitTypeSpearman=355;</Command>
		<Command>const int cUnitTypeAxeman=356;</Command>
		<Command>const int cUnitTypeSlinger=357;</Command>
		<Command>const int cUnitTypeRaidingCavalry=358;</Command>
		<Command>const int cUnitTypeCamelry=359;</Command>
		<Command>const int cUnitTypeDwarf=360;</Command>
		<Command>const int cUnitTypeBarracks=361;</Command>
		<Command>const int cUnitTypeDock=362;</Command>
		<Command>const int cUnitTypeFarm=363;</Command>
		<Command>const int cUnitTypeGranary=364;</Command>
		<Command>const int cUnitTypeArmory=365;</Command>
		<Command>const int cUnitTypeGate=366;</Command>
		<Command>const int cUnitTypeMarket=367;</Command>
		<Command>const int cUnitTypeStable=368;</Command>
		<Command>const int cUnitTypeFortress=369;</Command>
		<Command>const int cUnitTypeMonument=370;</Command>
		<Command>const int cUnitTypeSiegeCamp=371;</Command>
		<Command>const int cUnitTypeWonder=372;</Command>
		<Command>const int cUnitTypeCyclops=373;</Command>
		<Command>const int cUnitTypeGoat=374;</Command>
		<Command>const int cUnitTypeWolf=375;</Command>
		<Command>const int cUnitTypePine=376;</Command>
		<Command>const int cUnitTypeStorehouse=377;</Command>
		<Command>const int cUnitTypeScarab=378;</Command>
		<Command>const int cUnitTypeBallista=379;</Command>
		<Command>const int cUnitTypeSiegeTower=380;</Command>
		<Command>const int cUnitTypeCrocodile=381;</Command>
		<Command>const int cUnitTypeHippo=382;</Command>
		<Command>const int cUnitTypePalm=383;</Command>
		<Command>const int cUnitTypeFlag=384;</Command>
		<Command>const int cUnitTypeAnubite=385;</Command>
		<Command>const int cUnitTypeBear=386;</Command>
		<Command>const int cUnitTypeFireGiant=387;</Command>
		<Command>const int cUnitTypeLocustSwarm=388;</Command>
		<Command>const int cUnitTypeBoar=389;</Command>
		<Command>const int cUnitTypeFrostGiant=390;</Command>
		<Command>const int cUnitTypeWallLong=391;</Command>
		<Command>const int cUnitTypeCatapult=392;</Command>
		<Command>const int cUnitTypeCaravanNorse=393;</Command>
		<Command>const int cUnitTypeTroll=394;</Command>
		<Command>const int cUnitTypeMountainGiant=395;</Command>
		<Command>const int cUnitTypeEinheriar=396;</Command>
		<Command>const int cUnitTypeKraken=397;</Command>
		<Command>const int cUnitTypeSeaTurtle=398;</Command>
		<Command>const int cUnitTypeValkyrie=399;</Command>
		<Command>const int cUnitTypeBattleBoar=400;</Command>
		<Command>const int cUnitTypeTrireme=401;</Command>
		<Command>const int cUnitTypeFishingShipGreek=402;</Command>
		<Command>const int cUnitTypeBridge=403;</Command>
		<Command>const int cUnitTypeCow=404;</Command>
		<Command>const int cUnitTypeGiraffe=405;</Command>
		<Command>const int cUnitTypeStatuePharaoh=406;</Command>
		<Command>const int cUnitTypeTorch=407;</Command>
		<Command>const int cUnitTypePig=408;</Command>
		<Command>const int cUnitTypeLazerBear=409;</Command>
		<Command>const int cUnitTypeZebra=410;</Command>
		<Command>const int cUnitTypeWaterBuffalo=411;</Command>
		<Command>const int cUnitTypeGazelle=412;</Command>
		<Command>const int cUnitTypeBaboon=413;</Command>
		<Command>const int cUnitTypeCentaur=414;</Command>
		<Command>const int cUnitTypePhoenix=415;</Command>
		<Command>const int cUnitTypeManticore=416;</Command>
		<Command>const int cUnitTypeChimera=417;</Command>
		<Command>const int cUnitTypeSphinx=418;</Command>
		<Command>const int cUnitTypeMinotaur=419;</Command>
		<Command>const int cUnitTypeHydra=420;</Command>
		<Command>const int cUnitTypeChicken=421;</Command>
		<Command>const int cUnitTypeMonkey=422;</Command>
		<Command>const int cUnitTypeColossus=423;</Command>
		<Command>const int cUnitTypeMummy=424;</Command>
		<Command>const int cUnitTypeRoc=425;</Command>
		<Command>const int cUnitTypeMedusa=426;</Command>
		<Command>const int cUnitTypeObelisk=427;</Command>
		<Command>const int cUnitTypeHadesDoor=428;</Command>
		<Command>const int cUnitTypeAjax=429;</Command>
		<Command>const int cUnitTypeArkantos=430;</Command>
		<Command>const int cUnitTypeGargarensis=431;</Command>
		<Command>const int cUnitTypeSetna=432;</Command>
		<Command>const int cUnitTypeShabaKa=433;</Command>
		<Command>const int cUnitTypeOdysseus=434;</Command>
		<Command>const int cUnitTypeChiron=435;</Command>
		<Command>const int cUnitTypeAmanra=436;</Command>
		<Command>const int cUnitTypeWallConnector=437;</Command>
		<Command>const int cUnitTypeWallShort=438;</Command>
		<Command>const int cUnitTypeLeviathan=439;</Command>
		<Command>const int cUnitTypeStatueLionRight=440;</Command>
		<Command>const int cUnitTypeStatueLionLeft=441;</Command>
		<Command>const int cUnitTypeEgyptianVulture=442;</Command>
		<Command>const int cUnitTypeReginleif=443;</Command>
		<Command>const int cUnitTypeScout=444;</Command>
		<Command>const int cUnitTypeArcheryRange=445;</Command>
		<Command>const int cUnitTypeScorpionMan=446;</Command>
		<Command>const int cUnitTypeMinion=447;</Command>
		<Command>const int cUnitTypeFishPerch=448;</Command>
		<Command>const int cUnitTypeGreatBox=449;</Command>
		<Command>const int cUnitTypeGreatBoxCart=450;</Command>
		<Command>const int cUnitTypeGoldMine=451;</Command>
		<Command>const int cUnitTypeKamos=452;</Command>
		<Command>const int cUnitTypeOakTree=453;</Command>
		<Command>const int cUnitTypePyramidLarge=454;</Command>
		<Command>const int cUnitTypePyramidSmall=455;</Command>
		<Command>const int cUnitTypeLion=456;</Command>
		<Command>const int cUnitTypeRhinocerous=457;</Command>
		<Command>const int cUnitTypeHyena=458;</Command>
		<Command>const int cUnitTypeCrownedCrane=459;</Command>
		<Command>const int cUnitTypeAurochs=460;</Command>
		<Command>const int cUnitTypeFishMahi=461;</Command>
		<Command>const int cUnitTypeFishSalmon=462;</Command>
		<Command>const int cUnitTypeGiantDuckbilledPlatypus=463;</Command>
		<Command>const int cUnitTypeTemple=464;</Command>
		<Command>const int cUnitTypeHouse=465;</Command>
		<Command>const int cUnitTypeTent=466;</Command>
		<Command>const int cUnitTypeElephant=467;</Command>
		<Command>const int cUnitTypeTunnel=468;</Command>
		<Command>const int cUnitTypeTower=469;</Command>
		<Command>const int cUnitTypeSettlement=470;</Command>
		<Command>const int cUnitTypePegasus=471;</Command>
		<Command>const int cUnitTypeScylla=472;</Command>
		<Command>const int cUnitTypeAvenger=473;</Command>
		<Command>const int cUnitTypeRaven=474;</Command>
		<Command>const int cUnitTypeExcavation=475;</Command>
		<Command>const int cUnitTypeGuardian=476;</Command>
		<Command>const int cUnitTypeGuardianSleeping=477;</Command>
		<Command>const int cUnitTypeSwordBearers=478;</Command>
		<Command>const int cUnitTypeDeer=479;</Command>
		<Command>const int cUnitTypeSettlementLevel1=480;</Command>
		<Command>const int cUnitTypeOxCart=481;</Command>
		<Command>const int cUnitTypeFenceStone=482;</Command>
		<Command>const int cUnitTypeFenceWood=483;</Command>
		<Command>const int cUnitTypeVillagerNorse=484;</Command>
		<Command>const int cUnitTypeLonghouse=485;</Command>
		<Command>const int cUnitTypeAcademy=486;</Command>
		<Command>const int cUnitTypeVillagerGreek=487;</Command>
		<Command>const int cUnitTypePortableRam=488;</Command>
		<Command>const int cUnitTypeHillFort=489;</Command>
		<Command>const int cUnitTypeVillagerEgyptian=490;</Command>
		<Command>const int cUnitTypeThrowingAxeman=491;</Command>
		<Command>const int cUnitTypeUlfsark=492;</Command>
		<Command>const int cUnitTypeHuskarl=493;</Command>
		<Command>const int cUnitTypeShrine=494;</Command>
		<Command>const int cUnitTypeHeroNorse=495;</Command>
		<Command>const int cUnitTypeHeroGreekAchilles=496;</Command>
		<Command>const int cUnitTypePharaoh=497;</Command>
		<Command>const int cUnitTypeLumberCamp=498;</Command>
		<Command>const int cUnitTypeMiningCamp=499;</Command>
		<Command>const int cUnitTypeHeroGreekOdysseus=500;</Command>
		<Command>const int cUnitTypeHeroGreekChiron=501;</Command>
		<Command>const int cUnitTypeHeroGreekPolyphemus=502;</Command>
		<Command>const int cUnitTypeHoplite=503;</Command>
		<Command>const int cUnitTypeHypaspist=504;</Command>
		<Command>const int cUnitTypeHippikon=505;</Command>
		<Command>const int cUnitTypeProdromos=506;</Command>
		<Command>const int cUnitTypePeltast=507;</Command>
		<Command>const int cUnitTypeToxotes=508;</Command>
		<Command>const int cUnitTypePetrobolos=509;</Command>
		<Command>const int cUnitTypeHelepolis=510;</Command>
		<Command>const int cUnitTypePriest=511;</Command>
		<Command>const int cUnitTypeMigdolStronghold=512;</Command>
		<Command>const int cUnitTypeChariotArcher=513;</Command>
		<Command>const int cUnitTypeMyrmidon=514;</Command>
		<Command>const int cUnitTypeHetairoi=515;</Command>
		<Command>const int cUnitTypeCataphract=516;</Command>
		<Command>const int cUnitTypeMercenary=517;</Command>
		<Command>const int cUnitTypeMonument2=518;</Command>
		<Command>const int cUnitTypeMonument3=519;</Command>
		<Command>const int cUnitTypeMonument4=520;</Command>
		<Command>const int cUnitTypeMonument5=521;</Command>
		<Command>const int cUnitTypeStatueofMajorGod=522;</Command>
		<Command>const int cUnitTypeDwarvenForge=523;</Command>
		<Command>const int cUnitTypeFolstagFlagBearer=524;</Command>
		<Command>const int cUnitTypeTrojanHorse=525;</Command>
		<Command>const int cUnitTypeBerryBush=526;</Command>
		<Command>const int cUnitTypeBolderWall=527;</Command>
		<Command>const int cUnitTypeMercenaryCavalry=528;</Command>
		<Command>const int cUnitTypePirateShip=529;</Command>
		<Command>const int cUnitTypeGateRam=530;</Command>
		<Command>const int cUnitTypeJarl=531;</Command>
		<Command>const int cUnitTypeWallLongDestructionSFX=532;</Command>
		<Command>const int cUnitTypeWallShortDestructionSFX=533;</Command>
		<Command>const int cUnitTypeWallConnectorDestructionSFX=534;</Command>
		<Command>const int cUnitTypeOutpost=535;</Command>
		<Command>const int cUnitTypeTransportShipGreek=536;</Command>
		<Command>const int cUnitTypeKebenit=537;</Command>
		<Command>const int cUnitTypeLongboat=538;</Command>
		<Command>const int cUnitTypeLighthouse=539;</Command>
		<Command>const int cUnitTypeHeroBoar=540;</Command>
		<Command>const int cUnitTypeHeroGreekHeracles=541;</Command>
		<Command>const int cUnitTypeHeroGreekJason=542;</Command>
		<Command>const int cUnitTypeFishingShipNorse=543;</Command>
		<Command>const int cUnitTypeFishingShipEgyptian=544;</Command>
		<Command>const int cUnitTypeTransportShipEgyptian=545;</Command>
		<Command>const int cUnitTypeTroyGate=546;</Command>
		<Command>const int cUnitTypeTroyWallConnector=547;</Command>
		<Command>const int cUnitTypeTroyWallLong=548;</Command>
		<Command>const int cUnitTypeTroyWallShort=549;</Command>
		<Command>const int cUnitTypeHeroGreekHippolyta=550;</Command>
		<Command>const int cUnitTypeHeroGreekTheseus=551;</Command>
		<Command>const int cUnitTypeHeroGreekBellerophon=552;</Command>
		<Command>const int cUnitTypeHeroGreekAjax=553;</Command>
		<Command>const int cUnitTypeHeroGreekAtalanta=554;</Command>
		<Command>const int cUnitTypeHeroGreekPerseus=555;</Command>
		<Command>const int cUnitTypeFlyingPurpleHippo=556;</Command>
		<Command>const int cUnitTypeCaravanGreek=557;</Command>
		<Command>const int cUnitTypeCaravanEgyptian=558;</Command>
		<Command>const int cUnitTypeRelic=559;</Command>
		<Command>const int cUnitTypeSkult=560;</Command>
		<Command>const int cUnitTypeBolderRolling=561;</Command>
		<Command>const int cUnitTypeGoldMineSmall=562;</Command>
		<Command>const int cUnitTypePineSnow=563;</Command>
		<Command>const int cUnitTypeCirce=564;</Command>
		<Command>const int cUnitTypeStopCombat=565;</Command>
		<Command>const int cUnitTypeNavalShipyard=566;</Command>
		<Command>const int cUnitTypeRammingShipGreek=567;</Command>
		<Command>const int cUnitTypeSiegeShipGreek=568;</Command>
		<Command>const int cUnitTypeHeroGreekArgo=569;</Command>
		<Command>const int cUnitTypeRammingShipNorse=570;</Command>
		<Command>const int cUnitTypeRammingShipEgyptian=571;</Command>
		<Command>const int cUnitTypeSiegeShipNorse=572;</Command>
		<Command>const int cUnitTypeSiegeShipEgyptian=573;</Command>
		<Command>const int cUnitTypeShade=574;</Command>
		<Command>const int cUnitTypeAnimalAttractor=575;</Command>
		<Command>const int cUnitTypeHealingSpringObject=576;</Command>
		<Command>const int cUnitTypeSerpent=577;</Command>
		<Command>const int cUnitTypeSentinelMain=578;</Command>
		<Command>const int cUnitTypeCitadelCenter=579;</Command>
		<Command>const int cUnitTypeWalkingWoodsPine=580;</Command>
		<Command>const int cUnitTypeWalkingWoodsOak=581;</Command>
		<Command>const int cUnitTypeWalkingWoodsPalm=582;</Command>
		<Command>const int cUnitTypeHeroRagnorok=583;</Command>
		<Command>const int cUnitTypeNidhogg=584;</Command>
		<Command>const int cUnitTypeFimbulwinterWolf=585;</Command>
		<Command>const int cUnitTypePlentyVault=586;</Command>
		<Command>const int cUnitTypePharaohofOsiris=587;</Command>
		<Command>const int cUnitTypeGoldMineDwarven=588;</Command>
		<Command>const int cUnitTypeFenrisWolf=589;</Command>
		<Command>const int cUnitTypeAthena=590;</Command>
		<Command>const int cUnitTypeWalrus=591;</Command>
		<Command>const int cUnitTypeWadjet=592;</Command>
		<Command>const int cUnitTypePetsuchos=593;</Command>
		<Command>const int cUnitTypeNemeanLion=594;</Command>
		<Command>const int cUnitTypeAgamemnon=595;</Command>
		<Command>const int cUnitTypeTheocrat=596;</Command>
		<Command>const int cUnitTypeShadeofHades=597;</Command>
		<Command>const int cUnitTypeAtlantisWallConnector=598;</Command>
		<Command>const int cUnitTypeAtlantisWallLong=599;</Command>
		<Command>const int cUnitTypeAtlantisGate=600;</Command>
		<Command>const int cUnitTypeTamariskTree=601;</Command>
		<Command>const int cUnitTypePhoenixEgg=602;</Command>
		<Command>const int cUnitTypePolarBear=603;</Command>
		<Command>const int cUnitTypeWalkingWoodsPineSnow=604;</Command>
		<Command>const int cUnitTypeCaribou=605;</Command>
		<Command>const int cUnitTypeElk=606;</Command>
		<Command>const int cUnitTypePigSpecial=607;</Command>
		<Command>const int cUnitTypeTitanBad=608;</Command>
		<Command>const int cUnitTypePalmBurning=609;</Command>
		<Command>const int cUnitTypeOakTreeBurning=610;</Command>
		<Command>const int cUnitTypePineBurning=611;</Command>
		<Command>const int cUnitTypeGreatBoxCart2=612;</Command>
		<Command>const int cUnitTypeTransportShipNorse=613;</Command>
		<Command>const int cUnitTypeThorHammerHaft=614;</Command>
		<Command>const int cUnitTypeThorHammerHead=615;</Command>
		<Command>const int cUnitTypePineSnowBurning=616;</Command>
		<Command>const int cUnitTypeWarElephant=617;</Command>
		<Command>const int cUnitTypeOakAutumn=618;</Command>
		<Command>const int cUnitTypeBrokk=619;</Command>
		<Command>const int cUnitTypeEitri=620;</Command>
		<Command>const int cUnitTypeDwarfFoundry=621;</Command>
		<Command>const int cUnitTypeHippocampus=622;</Command>
		<Command>const int cUnitTypeOakAutumnBurning=623;</Command>
		<Command>const int cUnitTypeSkraeling=624;</Command>
		<Command>const int cUnitTypeUnderworldPassageSPC=625;</Command>
		<Command>const int cUnitTypeCarcinos=626;</Command>
		<Command>const int cUnitTypeJormundElver=627;</Command>
		<Command>const int cUnitTypeMilitia=628;</Command>
		<Command>const int cUnitTypeKastor=629;</Command>
		<Command>const int cUnitTypeSeaSnake=630;</Command>
		<Command>const int cUnitTypeOldMan=631;</Command>
		<Command>const int cUnitTypeJailWall=632;</Command>
		<Command>const int cUnitTypeDigPile=633;</Command>
		<Command>const int cUnitTypeGoldenFleece=634;</Command>
		<Command>const int cUnitTypeTempleUnderworld=635;</Command>
		<Command>const int cUnitTypeArkantosman=636;</Command>
		<Command>const int cUnitTypeBolderRollingDead=637;</Command>
		<Command>const int cUnitTypeBolderRolling2=638;</Command>
		<Command>const int cUnitTypePineDead=639;</Command>
		<Command>const int cUnitTypeGateRam2=640;</Command>
		<Command>const int cUnitTypeMiniAtlantis=641;</Command>
		<Command>const int cUnitTypeAtlantisTile=642;</Command>
		<Command>const int cUnitTypeAtlantisTileDead=643;</Command>
		<Command>const int cUnitTypeWellofUrd=644;</Command>
		<Command>const int cUnitTypeTroyGateDead=645;</Command>
		<Command>const int cUnitTypePlentyVaultKOTH=646;</Command>
		<Command>const int cUnitTypePoseidonStatue=647;</Command>
		<Command>const int cUnitTypePharaohSecondary=648;</Command>
		<Command>const int cUnitTypeSavannahTree=649;</Command>
		<Command>const int cUnitTypeGoldenLion=650;</Command>
		<Command>const int cUnitTypeMonkeyRelic=651;</Command>
		<Command>const int cUnitTypeGhostShip=652;</Command>
		<Command>const int cUnitTypeShadeofErebus=653;</Command>
		<Command>const int cUnitTypeBanditMigdol=654;</Command>
		<Command>const int cUnitTypeGoldMineTiny=655;</Command>
		<Command>const int cUnitTypeWallMedium=656;</Command>
		<Command>const int cUnitTypeStatueofLightning=657;</Command>
		<Command>const int cUnitTypeCrossbowman=658;</Command>
		<Command>const int cUnitTypeFenceIron=659;</Command>
		<Command>const int cUnitTypeCharonFerry=660;</Command>
		<Command>const int cUnitTypeHeroBoar2=661;</Command>
		<Command>const int cUnitTypeTaproot=662;</Command>
		<Command>const int cUnitTypeFemale=663;</Command>
		<Command>const int cUnitTypeTheris=664;</Command>
		<Command>const int cUnitTypeOrnlu=665;</Command>
		<Command>const int cUnitTypePolaris=666;</Command>
		<Command>const int cUnitTypeTamariskTreeDead=667;</Command>
		<Command>const int cUnitTypePrisoner=668;</Command>
		<Command>const int cUnitTypeFolstagFlag=669;</Command>
		<Command>const int cUnitTypeUndermineBuildingDestructionSFX=670;</Command>
		<Command>const int cUnitTypePineDeadBurning=671;</Command>
		<Command>const int cUnitTypeApeofSet=672;</Command>
		<Command>const int cUnitTypeGazelleofSet=673;</Command>
		<Command>const int cUnitTypeHyenaofSet=674;</Command>
		<Command>const int cUnitTypeCrocodileofSet=675;</Command>
		<Command>const int cUnitTypeHippoofSet=676;</Command>
		<Command>const int cUnitTypeRhinocerosofSet=677;</Command>
		<Command>const int cUnitTypeGiraffeofSet=678;</Command>
		<Command>const int cUnitTypeKrakenSPC=679;</Command>
		<Command>const int cUnitTypeSavannahTreeBurning=680;</Command>
		<Command>const int cUnitTypeWonderSPC=681;</Command>
		<Command>const int cUnitTypeMonkeyRaft=682;</Command>
		<Command>const int cUnitTypeForkboy=683;</Command>
		<Command>const int cUnitTypeWalkingBerryBush=684;</Command>
		<Command>const int cUnitTypeChickenExploding=685;</Command>
		<Command>const int cUnitTypeWalkingWoodsSavannah=686;</Command>
		<Command>const int cUnitTypeErebusTree=687;</Command>
		<Command>const int cUnitTypeVillagerAtlantean=688;</Command>
		<Command>const int cUnitTypeManor=689;</Command>
		<Command>const int cUnitTypeVillagerAtlanteanHero=690;</Command>
		<Command>const int cUnitTypeSwordsman=691;</Command>
		<Command>const int cUnitTypeTridentSoldier=692;</Command>
		<Command>const int cUnitTypeTridentSoldierHero=693;</Command>
		<Command>const int cUnitTypeSwordsmanHero=694;</Command>
		<Command>const int cUnitTypeFishingShipAtlantean=695;</Command>
		<Command>const int cUnitTypeBireme=696;</Command>
		<Command>const int cUnitTypeTransportShipAtlantean=697;</Command>
		<Command>const int cUnitTypeFireShipAtlantean=698;</Command>
		<Command>const int cUnitTypeSiegeShipAtlantean=699;</Command>
		<Command>const int cUnitTypeLancer=700;</Command>
		<Command>const int cUnitTypeLancerHero=701;</Command>
		<Command>const int cUnitTypeCounterBuilding=702;</Command>
		<Command>const int cUnitTypeChieroballista=703;</Command>
		<Command>const int cUnitTypeFireSiphon=704;</Command>
		<Command>const int cUnitTypeCaravanAtlantean=705;</Command>
		<Command>const int cUnitTypePalace=706;</Command>
		<Command>const int cUnitTypeRoyalGuard=707;</Command>
		<Command>const int cUnitTypeRoyalGuardHero=708;</Command>
		<Command>const int cUnitTypeSkyPassage=709;</Command>
		<Command>const int cUnitTypeTitanAtlantean=710;</Command>
		<Command>const int cUnitTypeBarracksAtlantean=711;</Command>
		<Command>const int cUnitTypeArcherAtlantean=712;</Command>
		<Command>const int cUnitTypeArcherAtlanteanHero=713;</Command>
		<Command>const int cUnitTypeMaceman=714;</Command>
		<Command>const int cUnitTypeMacemanHero=715;</Command>
		<Command>const int cUnitTypeJavelinCavalry=716;</Command>
		<Command>const int cUnitTypeJavelinCavalryHero=717;</Command>
		<Command>const int cUnitTypeAudrey=718;</Command>
		<Command>const int cUnitTypeAudreyWater=719;</Command>
		<Command>const int cUnitTypeGuild=720;</Command>
		<Command>const int cUnitTypeVolcano=721;</Command>
		<Command>const int cUnitTypeBehemoth=722;</Command>
		<Command>const int cUnitTypeFlyingMedic=723;</Command>
		<Command>const int cUnitTypeTowerMirror=724;</Command>
		<Command>const int cUnitTypePromethean=725;</Command>
		<Command>const int cUnitTypeServant=726;</Command>
		<Command>const int cUnitTypeSatyr=727;</Command>
		<Command>const int cUnitTypeStymphalianBird=728;</Command>
		<Command>const int cUnitTypeAutomaton=729;</Command>
		<Command>const int cUnitTypeManOWar=730;</Command>
		<Command>const int cUnitTypePrometheanSmall=731;</Command>
		<Command>const int cUnitTypeOracleHero=732;</Command>
		<Command>const int cUnitTypeGaiaForesttree=733;</Command>
		<Command>const int cUnitTypeHekaGigantes=734;</Command>
		<Command>const int cUnitTypeTundraTree=735;</Command>
		<Command>const int cUnitTypeMarshTree=736;</Command>
		<Command>const int cUnitTypeTartarianGate=737;</Command>
		<Command>const int cUnitTypeOracleScout=738;</Command>
		<Command>const int cUnitTypeTartarianGatespawn=739;</Command>
		<Command>const int cUnitTypeLampades=740;</Command>
		<Command>const int cUnitTypeKastorAdult=741;</Command>
		<Command>const int cUnitTypeMarshTreeBurning=742;</Command>
		<Command>const int cUnitTypeTundraTreeBurning=743;</Command>
		<Command>const int cUnitTypePhoenixFromEgg=744;</Command>
		<Command>const int cUnitTypeHesperidesTree=745;</Command>
		<Command>const int cUnitTypeDryad=746;</Command>
		<Command>const int cUnitTypeNereid=747;</Command>
		<Command>const int cUnitTypeTitanGate=748;</Command>
		<Command>const int cUnitTypeWalkingWoodsMarsh=749;</Command>
		<Command>const int cUnitTypeWalkingWoodsTundra=750;</Command>
		<Command>const int cUnitTypeTitanPrometheus=751;</Command>
		<Command>const int cUnitTypeGeneralMelagius=752;</Command>
		<Command>const int cUnitTypePharaohofOsirisXP=753;</Command>
		<Command>const int cUnitTypeGuardianSleepingXP=754;</Command>
		<Command>const int cUnitTypeStatueofAutomaton=755;</Command>
		<Command>const int cUnitTypeStatueofAutomatonBase=756;</Command>
		<Command>const int cUnitTypeArgus=757;</Command>
		<Command>const int cUnitTypeGaiaPool=758;</Command>
		<Command>const int cUnitTypeSpiderEgg=759;</Command>
		<Command>const int cUnitTypeKingFolstag=760;</Command>
		<Command>const int cUnitTypeOdinsTower=761;</Command>
		<Command>const int cUnitTypeStatueManticore=762;</Command>
		<Command>const int cUnitTypeStatueCyclops=763;</Command>
		<Command>const int cUnitTypeStatueNemeanLion=764;</Command>
		<Command>const int cUnitTypeStatueValkyrie=765;</Command>
		<Command>const int cUnitTypeStatueHydra=766;</Command>
		<Command>const int cUnitTypeStatueChimera=767;</Command>
		<Command>const int cUnitTypeGaiaForesttreeburning=768;</Command>
		<Command>const int cUnitTypeTartarianGateplacement=769;</Command>
		<Command>const int cUnitTypeTartarianGatebirth=770;</Command>
		<Command>const int cUnitTypeKrios=771;</Command>
		<Command>const int cUnitTypeKronny=772;</Command>
		<Command>const int cUnitTypeAjaxOlder=773;</Command>
		<Command>const int cUnitTypeAmanraOlder=774;</Command>
		<Command>const int cUnitTypeTitanGateDead=775;</Command>
		<Command>const int cUnitTypeTempleKronos=776;</Command>
		<Command>const int cUnitTypeArkantosGod=777;</Command>
		<Command>const int cUnitTypeEarth=778;</Command>
		<Command>const int cUnitTypeKronnyFlying=779;</Command>
		<Command>const int cUnitTypeVictoryMarker=780;</Command>
		<Command>const int cUnitTypeInvisibleWall=781;</Command>
		<Command>const int cUnitTypeInvisibleTarget=782;</Command>
		<Command>const int cUnitTypePyramidOsirisXpack=783;</Command>
		<Command>const int cUnitTypeStatueofMelagius=784;</Command>
		<Command>const int cUnitTypeTempleOvergrown=785;</Command>
		<Command>const int cUnitTypeRocTent=786;</Command>
		<Command>const int cUnitTypeGuardianXP=787;</Command>
		<Command>const int cUnitTypeAutomatonSPC=788;</Command>
		<Command>const int cUnitTypeSummoningTree=789;</Command>
		<Command>const int cUnitTypeSummoningTree2=790;</Command>
		<Command>const int cUnitTypeBolderRollingSmall=791;</Command>
		<Command>const int cUnitTypeTreeFinale=792;</Command>
		<Command>const int cUnitTypeKastorStaff=793;</Command>
		<Command>const int cUnitTypeHadesDoorSmall=794;</Command>
		<Command>const int cUnitTypeTitanKronos=795;</Command>
		<Command>const int cUnitTypeTitanGaia=796;</Command>
		<Command>const int cUnitTypeWolfArctic=797;</Command>
		<Command>const int cUnitTypeShadeXP=798;</Command>
		<Command>const int cUnitTypeWolfArctic2=799;</Command>
		<Command>const int cUnitTypeBella=800;</Command>
		<Command>const int cUnitTypeUnit=801;</Command>
		<Command>const int cUnitTypeShip=802;</Command>
		<Command>const int cUnitTypeBuilding=803;</Command>
		<Command>const int cUnitTypeMilitaryBuilding=804;</Command>
		<Command>const int cUnitTypeEconomicBuilding=805;</Command>
		<Command>const int cUnitTypeDropsite=806;</Command>
		<Command>const int cUnitTypeResource=807;</Command>
		<Command>const int cUnitTypeHuntedResource=808;</Command>
		<Command>const int cUnitTypeMinedResource=809;</Command>
		<Command>const int cUnitTypeLandResource=810;</Command>
		<Command>const int cUnitTypeWaterResource=811;</Command>
		<Command>const int cUnitTypeProjectile=812;</Command>
		<Command>const int cUnitTypeNature=813;</Command>
		<Command>const int cUnitTypeSpecialPowers=814;</Command>
		<Command>const int cUnitTypeUnattackable=815;</Command>
		<Command>const int cUnitTypeAbstractTemple=816;</Command>
		<Command>const int cUnitTypeMilitary=817;</Command>
		<Command>const int cUnitTypeHero=818;</Command>
		<Command>const int cUnitTypeTree=819;</Command>
		<Command>const int cUnitTypeAbstractInfantry=820;</Command>
		<Command>const int cUnitTypeAbstractCavalry=821;</Command>
		<Command>const int cUnitTypeAbstractArcher=822;</Command>
		<Command>const int cUnitTypeAbstractVillager=823;</Command>
		<Command>const int cUnitTypeAbstractFarm=824;</Command>
		<Command>const int cUnitTypeAbstractDock=825;</Command>
		<Command>const int cUnitTypeInventoryHolder=826;</Command>
		<Command>const int cUnitTypeInventoryItem=827;</Command>
		<Command>const int cUnitTypeUseableItem=828;</Command>
		<Command>const int cUnitTypeStrengthBonus=829;</Command>
		<Command>const int cUnitTypeTradeableTo=830;</Command>
		<Command>const int cUnitTypeTradeableFrom=831;</Command>
		<Command>const int cUnitTypeAbstractSiegeWeapon=832;</Command>
		<Command>const int cUnitTypeFlyingUnit=833;</Command>
		<Command>const int cUnitTypeMythUnit=834;</Command>
		<Command>const int cUnitTypeEconomic=835;</Command>
		<Command>const int cUnitTypeRanged=836;</Command>
		<Command>const int cUnitTypeFastSpeed=837;</Command>
		<Command>const int cUnitTypeAverageSpeed=838;</Command>
		<Command>const int cUnitTypeSlowSpeed=839;</Command>
		<Command>const int cUnitTypeGeneric=840;</Command>
		<Command>const int cUnitTypeUnitClass=841;</Command>
		<Command>const int cUnitTypeBuildingClass=842;</Command>
		<Command>const int cUnitTypeNatureClass=843;</Command>
		<Command>const int cUnitTypeEmbellishmentClass=844;</Command>
		<Command>const int cUnitTypeTestClass=845;</Command>
		<Command>const int cUnitTypeE3Class=846;</Command>
		<Command>const int cUnitTypeAll=847;</Command>
		<Command>const int cUnitTypeActionGather=848;</Command>
		<Command>const int cUnitTypeActionTrain=849;</Command>
		<Command>const int cUnitTypeActionBuild=850;</Command>
		<Command>const int cUnitTypeActionAttack=851;</Command>
		<Command>const int cUnitTypeActionTrickle=852;</Command>
		<Command>const int cUnitTypeFish=853;</Command>
		<Command>const int cUnitTypeTransport=854;</Command>
		<Command>const int cUnitTypeAbstractWall=855;</Command>
		<Command>const int cUnitTypeHerdable=856;</Command>
		<Command>const int cUnitTypeAbstractSettlement=857;</Command>
		<Command>const int cUnitTypeBuildingsThatShoot=858;</Command>
		<Command>const int cUnitTypeMythUnitGodPower=859;</Command>
		<Command>const int cUnitTypeAbstractTitan=860;</Command>
		<Command>const int cUnitTypeAbstractTradeUnit=861;</Command>
		<Command>const int cUnitTypeLokiHero=862;</Command>
		<Command>const int cUnitTypeAge2Building=863;</Command>
		<Command>const int cUnitTypeAge3Building=864;</Command>
		<Command>const int cUnitTypeAge1Temple=865;</Command>
		<Command>const int cUnitTypeFood=866;</Command>
		<Command>const int cUnitTypeGold=867;</Command>
		<Command>const int cUnitTypeWood=868;</Command>
		<Command>const int cUnitTypeWildCrops=869;</Command>
		<Command>const int cUnitTypeAge1Building=870;</Command>
		<Command>const int cUnitTypeFoodDropsite=871;</Command>
		<Command>const int cUnitTypeWoodDropsite=872;</Command>
		<Command>const int cUnitTypeGoldDropsite=873;</Command>
		<Command>const int cUnitTypeHumanSoldier=874;</Command>
		<Command>const int cUnitTypeHuntable=875;</Command>
		<Command>const int cUnitTypeAbstractMonument=876;</Command>
		<Command>const int cUnitTypeSettlementsThatTrainVillagers=877;</Command>
		<Command>const int cUnitTypeHack=878;</Command>
		<Command>const int cUnitTypeCrush=879;</Command>
		<Command>const int cUnitTypePierce=880;</Command>
		<Command>const int cUnitTypeSharedBuilding=881;</Command>
		<Command>const int cUnitTypeAbstractStable=882;</Command>
		<Command>const int cUnitTypeAbstractFortress=883;</Command>
		<Command>const int cUnitTypeAbstractBarracks=884;</Command>
		<Command>const int cUnitTypeAbstractArcheryRange=885;</Command>
		<Command>const int cUnitTypeEarlyWoodDropsite=886;</Command>
		<Command>const int cUnitTypeEarlyFoodDropsite=887;</Command>
		<Command>const int cUnitTypeEarlyGoldDropsite=888;</Command>
		<Command>const int cUnitTypeConvertableBuilding=889;</Command>
		<Command>const int cUnitTypeFavor=890;</Command>
		<Command>const int cUnitTypeAnimalPrey=891;</Command>
		<Command>const int cUnitTypeAnimalReactive=892;</Command>
		<Command>const int cUnitTypeAnimalPredator=893;</Command>
		<Command>const int cUnitTypeAbstractPharaoh=894;</Command>
		<Command>const int cUnitTypeMythUnitInfantry=895;</Command>
		<Command>const int cUnitTypeMythUnitCavalry=896;</Command>
		<Command>const int cUnitTypeMythUnitArcher=897;</Command>
		<Command>const int cUnitTypeMythUnitSiege=898;</Command>
		<Command>const int cUnitTypeUtilityShip=899;</Command>
		<Command>const int cUnitTypeLogicalTypeHandUnitsAttack=900;</Command>
		<Command>const int cUnitTypeLogicalTypePredatorsAutoAttack=901;</Command>
		<Command>const int cUnitTypeLogicalTypeMeanPredatorsAutoAttack=902;</Command>
		<Command>const int cUnitTypeLogicalTypeHandUnitsAutoAttack=903;</Command>
		<Command>const int cUnitTypeLogicalTypePredatorsAttack=904;</Command>
		<Command>const int cUnitTypeLogicalTypeScoutsRespondToAttack=905;</Command>
		<Command>const int cUnitTypeLogicalTypeBuildingsNotHouses=906;</Command>
		<Command>const int cUnitTypeLogicalTypeRangedUnitsAttack=907;</Command>
		<Command>const int cUnitTypeLogicalTypeRangedUnitsAutoAttack=908;</Command>
		<Command>const int cUnitTypeLogicalTypeUnitsNotBuildings=909;</Command>
		<Command>const int cUnitTypeLogicalTypeDangerousAnimals=910;</Command>
		<Command>const int cUnitTypeLogicalTypeIdleCivilian=911;</Command>
		<Command>const int cUnitTypeLogicalTypeIdleMilitary=912;</Command>
		<Command>const int cUnitTypeLogicalTypeTornadoAttack=913;</Command>
		<Command>const int cUnitTypeLogicalTypeNeededForVictory=914;</Command>
		<Command>const int cUnitTypeLogicalTypeIdleHero=915;</Command>
		<Command>const int cUnitTypeLogicalTypeValidBoltTarget=916;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByHealingSpring=917;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByRestoration=918;</Command>
		<Command>const int cUnitTypeLogicalTypeGarrisonOnBoats=919;</Command>
		<Command>const int cUnitTypeLogicalTypeCavalryAndScout=920;</Command>
		<Command>const int cUnitTypeLogicalTypeNonGreekUnit=921;</Command>
		<Command>const int cUnitTypeLogicalTypeVillagersAttack=922;</Command>
		<Command>const int cUnitTypeLogicalTypeEarthquakeAttack=923;</Command>
		<Command>const int cUnitTypeAbstractArmory=924;</Command>
		<Command>const int cUnitTypeLogicalTypeSiegeAutoAttack=925;</Command>
		<Command>const int cUnitTypeLogicalTypeCanBeHealed=926;</Command>
		<Command>const int cUnitTypeLogicalTypeMinimapFilterEconomic=927;</Command>
		<Command>const int cUnitTypeLogicalTypeMinimapFilterMilitary=928;</Command>
		<Command>const int cUnitTypeArcherShip=929;</Command>
		<Command>const int cUnitTypeHammerShip=930;</Command>
		<Command>const int cUnitTypeSiegeShip=931;</Command>
		<Command>const int cUnitTypeAbstractCart=932;</Command>
		<Command>const int cUnitTypeAbstractScout=933;</Command>
		<Command>const int cUnitTypeLogicalTypeValidSpyTarget=934;</Command>
		<Command>const int cUnitTypeAutoupgradedUnit=935;</Command>
		<Command>const int cUnitTypeLogicalTypeNavalMilitary=936;</Command>
		<Command>const int cUnitTypeLogicalTypeValidFrostTarget=937;</Command>
		<Command>const int cUnitTypeLogicalTypeValidMeteorTarget=938;</Command>
		<Command>const int cUnitTypeLogicalTypeSeaSerpentAttack=939;</Command>
		<Command>const int cUnitTypeLogicalTypeFavoriteUnit=940;</Command>
		<Command>const int cUnitTypeLogicalTypeFavoriteMythUnit=941;</Command>
		<Command>const int cUnitTypeLogicalTypeConvertsHerds=942;</Command>
		<Command>const int cUnitTypeLogicalTypeValidLocustSwarmTarget=943;</Command>
		<Command>const int cUnitTypeLogicalTypeValidShiftingSandsTarget=944;</Command>
		<Command>const int cUnitTypeLogicalTypeParticipatesInBattlecries=945;</Command>
		<Command>const int cUnitTypeLogicalTypeBuildingsThatTrainMilitary=946;</Command>
		<Command>const int cUnitTypeLogicalTypeRamAttack=947;</Command>
		<Command>const int cUnitTypeTransportShip=948;</Command>
		<Command>const int cUnitTypeLogicalTypeVillagersRespondToAttack=949;</Command>
		<Command>const int cUnitTypeLogicalTypeFimbulWinterTCEvalType=950;</Command>
		<Command>const int cUnitTypeLogicalTypeValidForestFireTarget=951;</Command>
		<Command>const int cUnitTypeLogicalTypeAutoattackTargetsBuildings=952;</Command>
		<Command>const int cUnitTypeWalkingWood=953;</Command>
		<Command>const int cUnitTypeLogicalTypeLandMilitary=954;</Command>
		<Command>const int cUnitTypeLogicalTypeValidSPCUnitsDeadCondition=955;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByTownBell=956;</Command>
		<Command>const int cUnitTypeLogicalTypeValidFlamingWeaponsTarget=957;</Command>
		<Command>const int cUnitTypeLogicalTypeGreekHeroes=958;</Command>
		<Command>const int cUnitTypeLogicalTypeMilitaryUnitsAndBuildings=959;</Command>
		<Command>const int cUnitTypeLogicalTypeOdinRegenerates=960;</Command>
		<Command>const int cUnitTypeLogicalTypeValidTraitorsTarget=961;</Command>
		<Command>const int cUnitTypeLogicalTypeSuperPredatorsAttack=962;</Command>
		<Command>const int cUnitTypeLogicalTypeSuperPredatorsAutoAttack=963;</Command>
		<Command>const int cUnitTypeLogicalTypeVolcanoAttack=964;</Command>
		<Command>const int cUnitTypeLogicalTypeValidDeconstructionTarget=965;</Command>
		<Command>const int cUnitTypeLogicalTypeValidTremorAttack=966;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByChaos=967;</Command>
		<Command>const int cUnitTypeLogicalTypeValidReverseWonderTarget=968;</Command>
		<Command>const int cUnitTypeLogicalTypeCanBeThrown=969;</Command>
		<Command>const int cUnitTypeLogicalTypeTartarianGateValidOverlapPlacement=970;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByVortex=971;</Command>
		<Command>const int cUnitTypeLogicalTypeDoesNotCreateLush=972;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByHeroize=973;</Command>
		<Command>const int cUnitTypeLogicalTypeValidSpiderTarget=974;</Command>
		<Command>const int cUnitTypeLogicalTypeImplodeAttack=975;</Command>
		<Command>const int cUnitTypeLogicalTypeCanBeStoned=976;</Command>
		<Command>const int cUnitTypeLogicalTypeAffectedByFrostGiant=977;</Command>
		<Command>const int cUnitTypeLogicalTypePerseusCanStone=978;</Command>
		<Command>const int cUnitTypeLogicalTypeMummyMinionTarget=979;</Command>
		<Command>const int cUnitTypeTeleporter=980;</Command>
		<Command>const int cUnitTypeLogicalTypeScreamsOnSpiderPull=981;</Command>
		<Command>const int cUnitTypeLogicalTypeTimeshift=982;</Command>
		<Command>const int cUnitTypeLogicalTypeInvulnerableToGaia=983;</Command>
		<Command>const int cUnitTypeLogicalTypeEasySelectAvoid=984;</Command>
		<Command>const int cUnitTypeLogicalTypeBuildingNotTitanGate=985;</Command>
		<Command>const int cUnitTypeLogicalTypeBuildingsNotWalls=986;</Command>
		<Command>const int cUnitTypeLogicalTypeNoFlailOnThrow=987;</Command>
		<Command>const int cUnitTypeLogicalTypeEscapesFrostOnTransform=988;</Command>
		<Command>const int cUnitTypeSetAnimal=989;</Command>
		<Command>const int cUnitTypeLogicalTypeMythUnitNotTitan=990;</Command>
		<Command>const int cUnitTypeLogicalTypeShipNotFishinghip=991;</Command>
		<Command>const int cUnitTypeLogicalTypeAbstractVillNotHero=992;</Command>
		<Command>const int cUnitTypeLogicalTypeHouses=993;</Command>
		<Command>const int cUnitTypeLogicalTypeGates=994;</Command>
		
		<!-- ******** Load Constants (Mythic_Freak) ******* -->
		
		<Command>rule LoadConstants</Command>
		<Command>	runImmediately active</Command>
		<Command>{</Command>
		<Command>	FP = trCurrentPlayer(); </Command>
		<Command>	cMyID = FP;</Command>
		<Command>	cNumberNonGaiaPlayers = cNumberPlayers - 1;</Command>
		<Command>	cMyCulture = kbGetCulture();</Command>
		<Command>	cMyCiv = kbGetCiv();</Command>
		<Command>	cGameMode = vcGetGameplayMode();</Command>
		<Command>	xsDisableSelf();</Command>
		<Command>}</Command>
		
		<!-- ************* String (invent00r) ************* -->
		
		<Command>string String_substr(string sText = "", int startPos = 0, int endPos = 2048) {</Command>
		<Command>   int pos = 0;</Command>
		<Command>   string dText = "";</Command>
		<Command>   string subText = "";</Command>
		<Command>   string currentChar = "";</Command>
		<Command>   while(true) // To infinity, and beyond!</Command>
		<Command>   {</Command>
		<Command>      if(dText == sText)</Command>
		<Command>      	break;</Command>
		<Command>      currentChar = "";</Command>
		<Command>      pos++;</Command>
		<Command>      if(dText+" " > sText)      {  currentChar = "";   }</Command>
		<Command>      else if(dText+"!" > sText) {  currentChar = " ";   }</Command>
		<Command>      else if(dText+"\"" > sText){  currentChar = "!";   }</Command>
		<Command>      else if(dText+"#" > sText) {  currentChar = "\"";  }</Command>
		<Command>      else if(dText+"$" > sText) {  currentChar = "#";   }</Command>
		<Command>      else if(dText+"%mod%" > sText) {  currentChar = "$";   }</Command>
		<Command><![CDATA[else if(dText+"&">sText){currentChar="%mod%";}]]></Command>
		<Command><![CDATA[else if(dText+"'">sText){currentChar="&";}]]></Command>
		<Command>      else if(dText+"(" > sText) {  currentChar = "'";   }</Command>
		<Command>      else if(dText+")" > sText) {  currentChar = "(";   }</Command>
		<Command>      else if(dText+"*" > sText) {  currentChar = ")";   }</Command>
		<Command>      else if(dText+"+" > sText) {  currentChar = "*";   }</Command>
		<Command>      else if(dText+"," > sText) {  currentChar = "+";   }</Command>
		<Command>      else if(dText+"-" > sText) {  currentChar = ",";   }</Command>
		<Command>      else if(dText+"." > sText) {  currentChar = "-";   }</Command>
		<Command>      else if(dText+"/" > sText) {  currentChar = ".";   }</Command>
		<Command>      else if(dText+"0" > sText) {  currentChar = "/";   }</Command>
		<Command>      else if(dText+"1" > sText) {  currentChar = "0";   }</Command>
		<Command>      else if(dText+"2" > sText) {  currentChar = "1";   }</Command>
		<Command>      else if(dText+"3" > sText) {  currentChar = "2";   }</Command>
		<Command>      else if(dText+"4" > sText) {  currentChar = "3";   }</Command>
		<Command>      else if(dText+"5" > sText) {  currentChar = "4";   }</Command>
		<Command>      else if(dText+"6" > sText) {  currentChar = "5";   }</Command>
		<Command>      else if(dText+"7" > sText) {  currentChar = "6";   }</Command>
		<Command>      else if(dText+"8" > sText) {  currentChar = "7";   }</Command>
		<Command>      else if(dText+"9" > sText) {  currentChar = "8";   }</Command>
		<Command>      else if(dText+":" > sText) {  currentChar = "9";   }</Command>
		<Command>      else if(dText+";" > sText) {  currentChar = ":";   }</Command>
		<Command><![CDATA[else if(dText+"<">sText){currentChar=";";}]]></Command>
		<Command><![CDATA[else if(dText+"=">sText){currentChar="<";}]]></Command>
		<Command>      else if(dText+">" > sText) {  currentChar = "=";   }</Command>
		<Command>      else if(dText+"?" > sText) {  currentChar = ">";   }</Command>
		<Command>      else if(dText+"@" > sText) {  currentChar = "?";   }</Command>
		<Command>      else if(dText+"a" > sText) {  currentChar = "@";   }</Command>
		<Command>      else if(dText+"b" > sText) {  currentChar = "a";   }</Command>
		<Command>      else if(dText+"c" > sText) {  currentChar = "b";   }</Command>
		<Command>      else if(dText+"d" > sText) {  currentChar = "c";   }</Command>
		<Command>      else if(dText+"e" > sText) {  currentChar = "d";   }</Command>
		<Command>      else if(dText+"f" > sText) {  currentChar = "e";   }</Command>
		<Command>      else if(dText+"g" > sText) {  currentChar = "f";   }</Command>
		<Command>      else if(dText+"h" > sText) {  currentChar = "g";   }</Command>
		<Command>      else if(dText+"i" > sText) {  currentChar = "h";   }</Command>
		<Command>      else if(dText+"j" > sText) {  currentChar = "i";   }</Command>
		<Command>      else if(dText+"k" > sText) {  currentChar = "j";   }</Command>
		<Command>      else if(dText+"l" > sText) {  currentChar = "k";   }</Command>
		<Command>      else if(dText+"m" > sText) {  currentChar = "l";   }</Command>
		<Command>      else if(dText+"n" > sText) {  currentChar = "m";   }</Command>
		<Command>      else if(dText+"o" > sText) {  currentChar = "n";   }</Command>
		<Command>      else if(dText+"p" > sText) {  currentChar = "o";   }</Command>
		<Command>      else if(dText+"q" > sText) {  currentChar = "p";   }</Command>
		<Command>      else if(dText+"r" > sText) {  currentChar = "q";   }</Command>
		<Command>      else if(dText+"s" > sText) {  currentChar = "r";   }</Command>
		<Command>      else if(dText+"t" > sText) {  currentChar = "s";   }</Command>
		<Command>      else if(dText+"u" > sText) {  currentChar = "t";   }</Command>
		<Command>      else if(dText+"v" > sText) {  currentChar = "u";   }</Command>
		<Command>      else if(dText+"w" > sText) {  currentChar = "v";   }</Command>
		<Command>      else if(dText+"x" > sText) {  currentChar = "w";   }</Command>
		<Command>      else if(dText+"y" > sText) {  currentChar = "x";   }</Command>
		<Command>      else if(dText+"z" > sText) {  currentChar = "y";   }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "z";   }</Command>
		<Command>      else if(dText+"\\" > sText){  currentChar = "[";   }</Command>
		<Command>      else if(dText+"]" > sText) {  currentChar = "\\";  }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "]";   }</Command>
		<Command>      else if(dText+"^" > sText) {  currentChar = "[";   }</Command>
		<Command>      else if(dText+"_" > sText) {  currentChar = "^";   }</Command>
		<Command>      else if(dText+"`" > sText) {  currentChar = "_";   }</Command>
		<Command>      else if(dText+"{" > sText) {  currentChar = "`";   }</Command>
		<Command>      else if(dText+"|" > sText) {  currentChar = "{";   }</Command>
		<Command>      else if(dText+"}" > sText) {  currentChar = "|";   }</Command>
		<Command>      else if(dText+"~" > sText) {  currentChar = "}";   }</Command>
		<Command>      else if(dText+"~~" > sText){  currentChar = "~";   }</Command>
		<Command>      dText = dText + currentChar;</Command>
		<Command>      if(pos >= startPos)</Command>
		<Command>         subText = subText + currentChar;</Command>
		<Command>      if(pos == startPos+endPos-1)</Command>
		<Command>        break;</Command>
		<Command>   }</Command>
		<Command>  return(subText);</Command>
		<Command>}</Command>
		
		<Command>int String_length(string sText = "") {</Command>
		<Command>   int pos = 0;</Command>
		<Command>   string dText = "";</Command>
		<Command>   string currentChar = "";</Command>
		<Command>   while(true) // To infinity, and beyond!</Command>
		<Command>   {</Command>
		<Command>      if(dText == sText)</Command>
		<Command>        break;</Command>
		<Command>      currentChar = "";</Command>
		<Command>      pos++;</Command>
		<Command>      if(dText+" " > sText)      {  currentChar = "";   }</Command>
		<Command>      else if(dText+"!" > sText) {  currentChar = " ";   }</Command>
		<Command>      else if(dText+"\"" > sText){  currentChar = "!";   }</Command>
		<Command>      else if(dText+"#" > sText) {  currentChar = "\"";  }</Command>
		<Command>      else if(dText+"$" > sText) {  currentChar = "#";   }</Command>
		<Command>      else if(dText+"%mod%" > sText) {  currentChar = "$";   }</Command>
		<Command><![CDATA[else if(dText+"&">sText){currentChar="%mod%";}]]></Command>
		<Command><![CDATA[else if(dText+"'">sText){currentChar="&";}]]></Command>
		<Command>      else if(dText+"(" > sText) {  currentChar = "'";   }</Command>
		<Command>      else if(dText+")" > sText) {  currentChar = "(";   }</Command>
		<Command>      else if(dText+"*" > sText) {  currentChar = ")";   }</Command>
		<Command>      else if(dText+"+" > sText) {  currentChar = "*";   }</Command>
		<Command>      else if(dText+"," > sText) {  currentChar = "+";   }</Command>
		<Command>      else if(dText+"-" > sText) {  currentChar = ",";   }</Command>
		<Command>      else if(dText+"." > sText) {  currentChar = "-";   }</Command>
		<Command>      else if(dText+"/" > sText) {  currentChar = ".";   }</Command>
		<Command>      else if(dText+"0" > sText) {  currentChar = "/";   }</Command>
		<Command>      else if(dText+"1" > sText) {  currentChar = "0";   }</Command>
		<Command>      else if(dText+"2" > sText) {  currentChar = "1";   }</Command>
		<Command>      else if(dText+"3" > sText) {  currentChar = "2";   }</Command>
		<Command>      else if(dText+"4" > sText) {  currentChar = "3";   }</Command>
		<Command>      else if(dText+"5" > sText) {  currentChar = "4";   }</Command>
		<Command>      else if(dText+"6" > sText) {  currentChar = "5";   }</Command>
		<Command>      else if(dText+"7" > sText) {  currentChar = "6";   }</Command>
		<Command>      else if(dText+"8" > sText) {  currentChar = "7";   }</Command>
		<Command>      else if(dText+"9" > sText) {  currentChar = "8";   }</Command>
		<Command>      else if(dText+":" > sText) {  currentChar = "9";   }</Command>
		<Command>      else if(dText+";" > sText) {  currentChar = ":";   }</Command>
		<Command><![CDATA[else if(dText+"<">sText){currentChar=";";}]]></Command>
		<Command><![CDATA[else if(dText+"=">sText){currentChar="<";}]]></Command>
		<Command>      else if(dText+">" > sText) {  currentChar = "=";   }</Command>
		<Command>      else if(dText+"?" > sText) {  currentChar = ">";   }</Command>
		<Command>      else if(dText+"@" > sText) {  currentChar = "?";   }</Command>
		<Command>      else if(dText+"a" > sText) {  currentChar = "@";   }</Command>
		<Command>      else if(dText+"b" > sText) {  currentChar = "a";   }</Command>
		<Command>      else if(dText+"c" > sText) {  currentChar = "b";   }</Command>
		<Command>      else if(dText+"d" > sText) {  currentChar = "c";   }</Command>
		<Command>      else if(dText+"e" > sText) {  currentChar = "d";   }</Command>
		<Command>      else if(dText+"f" > sText) {  currentChar = "e";   }</Command>
		<Command>      else if(dText+"g" > sText) {  currentChar = "f";   }</Command>
		<Command>      else if(dText+"h" > sText) {  currentChar = "g";   }</Command>
		<Command>      else if(dText+"i" > sText) {  currentChar = "h";   }</Command>
		<Command>      else if(dText+"j" > sText) {  currentChar = "i";   }</Command>
		<Command>      else if(dText+"k" > sText) {  currentChar = "j";   }</Command>
		<Command>      else if(dText+"l" > sText) {  currentChar = "k";   }</Command>
		<Command>      else if(dText+"m" > sText) {  currentChar = "l";   }</Command>
		<Command>      else if(dText+"n" > sText) {  currentChar = "m";   }</Command>
		<Command>      else if(dText+"o" > sText) {  currentChar = "n";   }</Command>
		<Command>      else if(dText+"p" > sText) {  currentChar = "o";   }</Command>
		<Command>      else if(dText+"q" > sText) {  currentChar = "p";   }</Command>
		<Command>      else if(dText+"r" > sText) {  currentChar = "q";   }</Command>
		<Command>      else if(dText+"s" > sText) {  currentChar = "r";   }</Command>
		<Command>      else if(dText+"t" > sText) {  currentChar = "s";   }</Command>
		<Command>      else if(dText+"u" > sText) {  currentChar = "t";   }</Command>
		<Command>      else if(dText+"v" > sText) {  currentChar = "u";   }</Command>
		<Command>      else if(dText+"w" > sText) {  currentChar = "v";   }</Command>
		<Command>      else if(dText+"x" > sText) {  currentChar = "w";   }</Command>
		<Command>      else if(dText+"y" > sText) {  currentChar = "x";   }</Command>
		<Command>      else if(dText+"z" > sText) {  currentChar = "y";   }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "z";   }</Command>
		<Command>      else if(dText+"\\" > sText){  currentChar = "[";   }</Command>
		<Command>      else if(dText+"]" > sText) {  currentChar = "\\";  }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "]";   }</Command>
		<Command>      else if(dText+"^" > sText) {  currentChar = "[";   }</Command>
		<Command>      else if(dText+"_" > sText) {  currentChar = "^";   }</Command>
		<Command>      else if(dText+"`" > sText) {  currentChar = "_";   }</Command>
		<Command>      else if(dText+"{" > sText) {  currentChar = "`";   }</Command>
		<Command>      else if(dText+"|" > sText) {  currentChar = "{";   }</Command>
		<Command>      else if(dText+"}" > sText) {  currentChar = "|";   }</Command>
		<Command>      else if(dText+"~" > sText) {  currentChar = "}";   }</Command>
		<Command>      else if(dText+"~~" > sText){  currentChar = "~";   }</Command>
		<Command>      dText = dText + currentChar;</Command>
		<Command>   }</Command>
		<Command>  return(pos);</Command>
		<Command>}</Command>
		
		<Command>string String_charAt(string sText = "", int pos = 1) {</Command>
		<Command>  return(String_substr(sText, pos, 1));</Command>
		<Command>}</Command>
		
		<Command>string String_toUpperCase(string sText = "") {</Command>
		<Command>   string dText = "";</Command>
		<Command>   string currentChar = "";</Command>
		<Command>   while(true) // To infinity, and beyond!</Command>
		<Command>   {</Command>
		<Command>      if(dText == sText)</Command>
		<Command>        break;</Command>
		<Command>      currentChar = "";</Command>
		<Command>      if(dText+" " > sText)      {  currentChar = "";   }</Command>
		<Command>      else if(dText+"!" > sText) {  currentChar = " ";   }</Command>
		<Command>      else if(dText+"\"" > sText){  currentChar = "!";   }</Command>
		<Command>      else if(dText+"#" > sText) {  currentChar = "\"";  }</Command>
		<Command>      else if(dText+"$" > sText) {  currentChar = "#";   }</Command>
		<Command>      else if(dText+"%mod%" > sText) {  currentChar = "$";   }</Command>
		<Command><![CDATA[else if(dText+"&">sText){currentChar="%mod%";}]]></Command>
		<Command><![CDATA[else if(dText+"'">sText){currentChar="&";}]]></Command>
		<Command>      else if(dText+"(" > sText) {  currentChar = "'";   }</Command>
		<Command>      else if(dText+")" > sText) {  currentChar = "(";   }</Command>
		<Command>      else if(dText+"*" > sText) {  currentChar = ")";   }</Command>
		<Command>      else if(dText+"+" > sText) {  currentChar = "*";   }</Command>
		<Command>      else if(dText+"," > sText) {  currentChar = "+";   }</Command>
		<Command>      else if(dText+"-" > sText) {  currentChar = ",";   }</Command>
		<Command>      else if(dText+"." > sText) {  currentChar = "-";   }</Command>
		<Command>      else if(dText+"/" > sText) {  currentChar = ".";   }</Command>
		<Command>      else if(dText+"0" > sText) {  currentChar = "/";   }</Command>
		<Command>      else if(dText+"1" > sText) {  currentChar = "0";   }</Command>
		<Command>      else if(dText+"2" > sText) {  currentChar = "1";   }</Command>
		<Command>      else if(dText+"3" > sText) {  currentChar = "2";   }</Command>
		<Command>      else if(dText+"4" > sText) {  currentChar = "3";   }</Command>
		<Command>      else if(dText+"5" > sText) {  currentChar = "4";   }</Command>
		<Command>      else if(dText+"6" > sText) {  currentChar = "5";   }</Command>
		<Command>      else if(dText+"7" > sText) {  currentChar = "6";   }</Command>
		<Command>      else if(dText+"8" > sText) {  currentChar = "7";   }</Command>
		<Command>      else if(dText+"9" > sText) {  currentChar = "8";   }</Command>
		<Command>      else if(dText+":" > sText) {  currentChar = "9";   }</Command>
		<Command>      else if(dText+";" > sText) {  currentChar = ":";   }</Command>
		<Command><![CDATA[else if(dText+"<">sText){currentChar=";";}]]></Command>
		<Command><![CDATA[else if(dText+"=">sText){currentChar="<";}]]></Command>
		<Command>      else if(dText+">" > sText) {  currentChar = "=";   }</Command>
		<Command>      else if(dText+"?" > sText) {  currentChar = ">";   }</Command>
		<Command>      else if(dText+"@" > sText) {  currentChar = "?";   }</Command>
		<Command>      else if(dText+"A" > sText) {  currentChar = "@";   }</Command>
		<Command>      else if(dText+"B" > sText) {  currentChar = "A";   }</Command>
		<Command>      else if(dText+"C" > sText) {  currentChar = "B";   }</Command>
		<Command>      else if(dText+"D" > sText) {  currentChar = "C";   }</Command>
		<Command>      else if(dText+"E" > sText) {  currentChar = "D";   }</Command>
		<Command>      else if(dText+"F" > sText) {  currentChar = "E";   }</Command>
		<Command>      else if(dText+"G" > sText) {  currentChar = "F";   }</Command>
		<Command>      else if(dText+"H" > sText) {  currentChar = "G";   }</Command>
		<Command>      else if(dText+"I" > sText) {  currentChar = "H";   }</Command>
		<Command>      else if(dText+"J" > sText) {  currentChar = "I";   }</Command>
		<Command>      else if(dText+"K" > sText) {  currentChar = "J";   }</Command>
		<Command>      else if(dText+"L" > sText) {  currentChar = "K";   }</Command>
		<Command>      else if(dText+"M" > sText) {  currentChar = "L";   }</Command>
		<Command>      else if(dText+"N" > sText) {  currentChar = "M";   }</Command>
		<Command>      else if(dText+"O" > sText) {  currentChar = "N";   }</Command>
		<Command>      else if(dText+"P" > sText) {  currentChar = "O";   }</Command>
		<Command>      else if(dText+"Q" > sText) {  currentChar = "P";   }</Command>
		<Command>      else if(dText+"R" > sText) {  currentChar = "Q";   }</Command>
		<Command>      else if(dText+"S" > sText) {  currentChar = "R";   }</Command>
		<Command>      else if(dText+"T" > sText) {  currentChar = "S";   }</Command>
		<Command>      else if(dText+"U" > sText) {  currentChar = "T";   }</Command>
		<Command>      else if(dText+"V" > sText) {  currentChar = "U";   }</Command>
		<Command>      else if(dText+"W" > sText) {  currentChar = "V";   }</Command>
		<Command>      else if(dText+"X" > sText) {  currentChar = "W";   }</Command>
		<Command>      else if(dText+"Y" > sText) {  currentChar = "X";   }</Command>
		<Command>      else if(dText+"Z" > sText) {  currentChar = "Y";   }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "Z";   }</Command>
		<Command>      else if(dText+"\\" > sText){  currentChar = "[";   }</Command>
		<Command>      else if(dText+"]" > sText) {  currentChar = "\\";  }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "]";   }</Command>
		<Command>      else if(dText+"^" > sText) {  currentChar = "[";   }</Command>
		<Command>      else if(dText+"_" > sText) {  currentChar = "^";   }</Command>
		<Command>      else if(dText+"`" > sText) {  currentChar = "_";   }</Command>
		<Command>      else if(dText+"{" > sText) {  currentChar = "`";   }</Command>
		<Command>      else if(dText+"|" > sText) {  currentChar = "{";   }</Command>
		<Command>      else if(dText+"}" > sText) {  currentChar = "|";   }</Command>
		<Command>      else if(dText+"~" > sText) {  currentChar = "}";   }</Command>
		<Command>      else if(dText+"~~" > sText){  currentChar = "~";   }</Command>
		<Command>      dText = dText + currentChar;</Command>
		<Command>   }</Command>
		<Command>  return(dText);</Command>
		<Command>}</Command>
		
		<Command>string String_toLowerCase(string sText = "") {</Command>
		<Command>   string dText = "";</Command>
		<Command>   string currentChar = "";</Command>
		<Command>   while(true) // To infinity, and beyond!</Command>
		<Command>   {</Command>
		<Command>      if(dText == sText)</Command>
		<Command>        break;</Command>
		<Command>      currentChar = "";</Command>
		<Command>      if(dText+" " > sText)      {  currentChar = "";   }</Command>
		<Command>      else if(dText+"!" > sText) {  currentChar = " ";   }</Command>
		<Command>      else if(dText+"\"" > sText){  currentChar = "!";   }</Command>
		<Command>      else if(dText+"#" > sText) {  currentChar = "\"";  }</Command>
		<Command>      else if(dText+"$" > sText) {  currentChar = "#";   }</Command>
		<Command>      else if(dText+"%mod%" > sText) {  currentChar = "$";   }</Command>
		<Command><![CDATA[else if(dText+"&">sText){currentChar="%mod%";}]]></Command>
		<Command><![CDATA[else if(dText+"'">sText){currentChar="&";}]]></Command>
		<Command>      else if(dText+"(" > sText) {  currentChar = "'";   }</Command>
		<Command>      else if(dText+")" > sText) {  currentChar = "(";   }</Command>
		<Command>      else if(dText+"*" > sText) {  currentChar = ")";   }</Command>
		<Command>      else if(dText+"+" > sText) {  currentChar = "*";   }</Command>
		<Command>      else if(dText+"," > sText) {  currentChar = "+";   }</Command>
		<Command>      else if(dText+"-" > sText) {  currentChar = ",";   }</Command>
		<Command>      else if(dText+"." > sText) {  currentChar = "-";   }</Command>
		<Command>      else if(dText+"/" > sText) {  currentChar = ".";   }</Command>
		<Command>      else if(dText+"0" > sText) {  currentChar = "/";   }</Command>
		<Command>      else if(dText+"1" > sText) {  currentChar = "0";   }</Command>
		<Command>      else if(dText+"2" > sText) {  currentChar = "1";   }</Command>
		<Command>      else if(dText+"3" > sText) {  currentChar = "2";   }</Command>
		<Command>      else if(dText+"4" > sText) {  currentChar = "3";   }</Command>
		<Command>      else if(dText+"5" > sText) {  currentChar = "4";   }</Command>
		<Command>      else if(dText+"6" > sText) {  currentChar = "5";   }</Command>
		<Command>      else if(dText+"7" > sText) {  currentChar = "6";   }</Command>
		<Command>      else if(dText+"8" > sText) {  currentChar = "7";   }</Command>
		<Command>      else if(dText+"9" > sText) {  currentChar = "8";   }</Command>
		<Command>      else if(dText+":" > sText) {  currentChar = "9";   }</Command>
		<Command>      else if(dText+";" > sText) {  currentChar = ":";   }</Command>
		<Command><![CDATA[else if(dText+"<">sText){currentChar=";";}]]></Command>
		<Command><![CDATA[else if(dText+"=">sText){currentChar="<";}]]></Command>
		<Command>      else if(dText+">" > sText) {  currentChar = "=";   }</Command>
		<Command>      else if(dText+"?" > sText) {  currentChar = ">";   }</Command>
		<Command>      else if(dText+"@" > sText) {  currentChar = "?";   }</Command>
		<Command>      else if(dText+"a" > sText) {  currentChar = "@";   }</Command>
		<Command>      else if(dText+"b" > sText) {  currentChar = "a";   }</Command>
		<Command>      else if(dText+"c" > sText) {  currentChar = "b";   }</Command>
		<Command>      else if(dText+"d" > sText) {  currentChar = "c";   }</Command>
		<Command>      else if(dText+"e" > sText) {  currentChar = "d";   }</Command>
		<Command>      else if(dText+"f" > sText) {  currentChar = "e";   }</Command>
		<Command>      else if(dText+"g" > sText) {  currentChar = "f";   }</Command>
		<Command>      else if(dText+"h" > sText) {  currentChar = "g";   }</Command>
		<Command>      else if(dText+"i" > sText) {  currentChar = "h";   }</Command>
		<Command>      else if(dText+"j" > sText) {  currentChar = "i";   }</Command>
		<Command>      else if(dText+"k" > sText) {  currentChar = "j";   }</Command>
		<Command>      else if(dText+"l" > sText) {  currentChar = "k";   }</Command>
		<Command>      else if(dText+"m" > sText) {  currentChar = "l";   }</Command>
		<Command>      else if(dText+"n" > sText) {  currentChar = "m";   }</Command>
		<Command>      else if(dText+"o" > sText) {  currentChar = "n";   }</Command>
		<Command>      else if(dText+"p" > sText) {  currentChar = "o";   }</Command>
		<Command>      else if(dText+"q" > sText) {  currentChar = "p";   }</Command>
		<Command>      else if(dText+"r" > sText) {  currentChar = "q";   }</Command>
		<Command>      else if(dText+"s" > sText) {  currentChar = "r";   }</Command>
		<Command>      else if(dText+"t" > sText) {  currentChar = "s";   }</Command>
		<Command>      else if(dText+"u" > sText) {  currentChar = "t";   }</Command>
		<Command>      else if(dText+"v" > sText) {  currentChar = "u";   }</Command>
		<Command>      else if(dText+"w" > sText) {  currentChar = "v";   }</Command>
		<Command>      else if(dText+"x" > sText) {  currentChar = "w";   }</Command>
		<Command>      else if(dText+"y" > sText) {  currentChar = "x";   }</Command>
		<Command>      else if(dText+"z" > sText) {  currentChar = "y";   }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "z";   }</Command>
		<Command>      else if(dText+"\\" > sText){  currentChar = "[";   }</Command>
		<Command>      else if(dText+"]" > sText) {  currentChar = "\\";  }</Command>
		<Command>      else if(dText+"[" > sText) {  currentChar = "]";   }</Command>
		<Command>      else if(dText+"^" > sText) {  currentChar = "[";   }</Command>
		<Command>      else if(dText+"_" > sText) {  currentChar = "^";   }</Command>
		<Command>      else if(dText+"`" > sText) {  currentChar = "_";   }</Command>
		<Command>      else if(dText+"{" > sText) {  currentChar = "`";   }</Command>
		<Command>      else if(dText+"|" > sText) {  currentChar = "{";   }</Command>
		<Command>      else if(dText+"}" > sText) {  currentChar = "|";   }</Command>
		<Command>      else if(dText+"~" > sText) {  currentChar = "}";   }</Command>
		<Command>      else if(dText+"~~" > sText){  currentChar = "~";   }</Command>
		<Command>      dText = dText + currentChar;</Command>
		<Command>   }</Command>
		<Command>  return(dText);</Command>
		<Command>}</Command>
		
		<Command>float String_parseFloat(string sText = "") {</Command>
		<Command>   float number = 0.0;</Command>
		<Command>   float multiplayer = 10.0; // We will use this to increment the number in the right position.</Command>
		<Command>                             // It will increase by 10 as we add more numbers, decrease 10 when we find a .</Command>
		<Command>   bool isNegative = false; // We all like to be positive. =)</Command>
		<Command>   string dText = "";</Command>
		<Command>   string currentChar = "";</Command>
		<Command>   while(true)</Command>
		<Command>   {</Command>
		<Command>      if(dText == sText)</Command>
		<Command>        break;</Command>
		<Command>      int currentNumber = -1;</Command>
		<Command>      if(dText+"-" > sText) {  currentChar = "I'm so Fabulicious OMG!!!";  }</Command>
		<Command>      else if(dText+"." > sText) {  isNegative = true; currentChar = "-";  }</Command>
		<Command>      else if(dText+"0" > sText) {  currentChar = "."; multiplayer = 0.1;  } // Slash Dot Dash dot dot dot dot com</Command>
		<Command>      else if(dText+"1" > sText) {  currentChar = "0"; currentNumber = 0;  }</Command>
		<Command>      else if(dText+"2" > sText) {  currentChar = "1"; currentNumber = 1;  }</Command>
		<Command>      else if(dText+"3" > sText) {  currentChar = "2"; currentNumber = 2;  }</Command>
		<Command>      else if(dText+"4" > sText) {  currentChar = "3"; currentNumber = 3;  }</Command>
		<Command>      else if(dText+"5" > sText) {  currentChar = "4"; currentNumber = 4;  }</Command>
		<Command>      else if(dText+"6" > sText) {  currentChar = "5"; currentNumber = 5;  }</Command>
		<Command>      else if(dText+"7" > sText) {  currentChar = "6"; currentNumber = 6;  }</Command>
		<Command>      else if(dText+"8" > sText) {  currentChar = "7"; currentNumber = 7;  }</Command>
		<Command>      else if(dText+"9" > sText) {  currentChar = "8"; currentNumber = 8;  }</Command>
		<Command>      else if(dText+":" > sText) {  currentChar = "9"; currentNumber = 9;  }</Command>
		<Command>      else {  return(-1.0);  } // We only accept the above characters.</Command>
		<Command>      dText = dText + currentChar;</Command>
		<Command>      if(currentNumber != -1)</Command>
		<Command>      {</Command>
		<Command>         if(multiplayer == 10.0)</Command>
		<Command>         {</Command>
		<Command>            number = 1*(number*10.0+currentNumber);</Command>
		<Command>         }</Command>
		<Command>         else</Command>
		<Command>         {</Command>
		<Command>            number = number + multiplayer*currentNumber;</Command>
		<Command>            multiplayer = multiplayer*0.1;</Command>
		<Command>         }</Command>
		<Command>      }</Command>
		<Command>   }</Command>
		<Command>   if(isNegative)</Command>
		<Command>     return(-1.0*number);</Command>
		<Command>   return(number);</Command>
		<Command>}</Command>
		
		<Command>string String_toString(float a = 0.0) {</Command>
		<Command>	return(""+a);</Command>
		<Command>}</Command>
		
		<!-- ************* Math (Mythic_Freak) ************ -->
		
		<Command>float Math_mod(float a = 0, float b = 0) {</Command>
		<Command>	return (a %mod% b);</Command>
		<Command>}</Command>

		<Command>int Math_floor(float a = 0) {</Command>
		<Command>	return (1*a);</Command>
		<Command>}</Command>

		<Command>int Math_ceil(float a = 0) {</Command>
		<Command>	return (1*a+1);</Command>
		<Command>}</Command>

		<Command>float Math_radianToDegree(float radian=PI) {</Command>
		<Command>	return (180.0/PI)*radian;</Command>
		<Command>}</Command>

		<Command>float Math_degreeToRadian(float degree=180) {</Command>
		<Command>	return (PI/180.0)*degree;</Command>
		<Command>}</Command>

		<Command>bool Math_intToBool(int a = 0) {</Command>
		<Command>	if(a==0) return (false);</Command>
		<Command>	return (true);</Command>
		<Command>}</Command>

		<Command>int Math_boolToInt(bool a = false) {</Command>
		<Command>	if(a) return (1);</Command>
		<Command>	return (0);</Command>
		<Command>}</Command>

		<Command>float Math_intToFloat(int a = 0) {</Command>
		<Command>	return (1.0*a);</Command>
		<Command>}</Command>

		<Command>int Math_floatToInt(float a = 0.0) {</Command>
		<Command>	return (Math_floor(a));</Command>
		<Command>}</Command>

		<Command>float Math_pow(float n = 0, int x = 0) {</Command>
		<Command>	float r = n;</Command>
		<Command>	if(x >= 0) {</Command>
		<Command>   	for(i = x; > 1) {r = r * n;}</Command>
		<Command>   	return (r);</Command>
		<Command>   } else {</Command>
		<Command>   	for(i = 0.0-x; > 1) {r = r * n;}</Command>
		<Command>   	return(1.0/r);</Command>
		<Command>	}</Command>
		<Command>}</Command>

		<Command>float Math_abs(float a = 0) {</Command>
		<Command>	if(a>=0) {return (0.0+a);}</Command>
		<Command>	else {return (0.0-a);}</Command>
		<Command>}</Command>

		<Command>float Math_fact(int n = 0) {</Command>
		<Command> 	float r = 1;</Command>
		<Command>	for(i = n; >= 1) {r = r * i;}</Command>
		<Command>	return (r);</Command>
		<Command>}</Command>

		<Command>int Math_round(float a = 0) {</Command>
		<Command>	int i = a;</Command>
		<Command>	if(a-i >= 0.5) {return (i+1);}</Command>
		<Command>	return (i);</Command>
		<Command>}</Command>

		<Command>float Math_approx(float a = 0, float approx = 0.00001) {</Command>
		<Command>	int b = Math_round(a);</Command>
		<Command>	if(approx > Math_abs(Math_intToFloat(b)-a)) return (b);</Command>
		<Command>	return (a);</Command>
		<Command>}</Command>

		<Command>int Math_gcd(int a = 2, int b = 4) {</Command>
		<Command>if ((0 > a) || (0 > b)) return (-1);</Command>
		<Command><![CDATA[if ((a == 0) && (b == 0)) return (-1);]]></Command>
		<Command><![CDATA[while ((a != 0) && (b != 0)) {]]></Command>
		<Command>	if (a > b) {a = a %mod% b;}</Command>
		<Command>	else {b = b %mod% a;}</Command>
		<Command>}</Command>
		<Command>if (b == 0) {return (a);}</Command>
		<Command>else {return (b);}</Command>
		<Command>}</Command>

		<Command>int Math_lcm(int a = 2, int b = 4) {</Command>
		<Command>	if ((0 > a) || (0 > b)) return (-1);</Command>
		<Command>	<![CDATA[if ((a == 0) && (b == 0)) return (-1);]]></Command>
		<Command>	return ((a/Math_gcd(a,b))*b);</Command>
		<Command>}</Command>
		
		<Command>float Math_atan(float n = 0) { //Matei and HailToTheOboe</Command>
		<Command>      float m = n;</Command>
		<Command>      if(n > 1.0) m = 1.0 / n;</Command>
		<Command>      if(-1.0 > n) m = -1.0 / n;</Command>
		<Command>      float r = m;</Command>
		<Command>      <![CDATA[for(i = 1; < 100) {]]></Command>
		<Command>      int j = i * 2 + 1;</Command>
		<Command>      float k = Math_pow(m,j) / j;</Command>
		<Command>      if(k == 0) break;</Command>
		<Command>      if(i %mod% 2 == 0) r = r + k;</Command>
		<Command>      if(i %mod% 2 == 1) r = r - k;</Command>
		<Command>      }</Command>
		<Command>      if(n > 1.0 || -1.0 > n) r = PI / 2.0 - r;</Command>
		<Command>      if(-1.0 > n) r = 0.0 - r;</Command>
		<Command>      return (r);</Command>
		<Command>}</Command>

		<Command>float Math_atan2(float z = 0, float x = 0) { //Matei</Command>
		<Command>      if(x > 0) return (Math_atan(z / x));</Command>
		<Command>      if(0 > x) {</Command>
		<Command>      if(0 > z) return (Math_atan(z / x) - PI);</Command>
		<Command>      if(z > 0) return (Math_atan(z / x) + PI);</Command>
		<Command>      return (PI);</Command>
		<Command>      }</Command>
		<Command>      if(z > 0) return (PI / 2.0);</Command>
		<Command>      if(0 > z) return (0.0 - (PI / 2.0));</Command>
		<Command>      return (0);</Command>
		<Command>}</Command>

		<Command>float Math_cos(float n = 0) { //Matei</Command>
		<Command>    float r = 1;</Command>
		<Command>    <![CDATA[for(i = 1; < 100) {]]></Command>
		<Command>        int j = i * 2;</Command>
		<Command>        float k = Math_pow(n,j) / Math_fact(j);</Command>
		<Command>        if(k == 0) break;</Command>
		<Command>        if(i %mod% 2 == 0) r = r + k;</Command>
		<Command>        if(i %mod% 2 == 1) r = r - k;</Command>
		<Command>    }</Command>
		<Command>    return (r);</Command>
		<Command>}</Command>

		<Command>float Math_sin(float n = 0) { //Matei</Command>
		<Command>    float r = n;</Command>
		<Command>    <![CDATA[for(i = 1; < 100) {]]></Command>
		<Command>        int j = i * 2 + 1;</Command>
		<Command>        float k = Math_pow(n,j) / Math_fact(j);</Command>
		<Command>        if(k == 0) break;</Command>
		<Command>        if(i %mod% 2 == 0) r = r + k;</Command>
		<Command>        if(i %mod% 2 == 1) r = r - k;</Command>
		<Command>    }</Command>
		<Command>    return (r);</Command>
		<Command>}</Command>

		<Command>float Math_tan(float n = 0) {</Command>
		<Command>	return (Math_sin(n)/Math_cos(n));</Command>
		<Command>}</Command>

		<Command>float Math_cotan(float n = 0) {</Command>
		<Command>	return (Math_cos(n)/Math_sin(n));</Command>
		<Command>}</Command>

		<Command>float Math_sec(float n = 0) {</Command>
		<Command>	return (1.0/Math_cos(n));</Command>
		<Command>}</Command>

		<Command>float Math_cosec(float n = 0) {</Command>
		<Command>	return (1.0/Math_sin(n));</Command>
		<Command>}</Command>

		<Command>float Math_sinh(float n = 0) {</Command>
		<Command>	return((Math_pow(e,n)-Math_pow(e,0.0-n))/2.0);</Command>
		<Command>}</Command>

		<Command>float Math_cosh(float n = 0) {</Command>
		<Command>	return((Math_pow(e,n)+Math_pow(e,0.0-n))/2.0);</Command>
		<Command>}</Command>

		<Command>float Math_tanh(float n = 0) {</Command>
		<Command>	return(Math_sinh(n)/Math_cosh(n));</Command>
		<Command>}</Command>

		<Command>float Math_cotanh(float n = 0) {</Command>
		<Command>	return(Math_cosh(n)/Math_sinh(n));</Command>
		<Command>}</Command>

		<Command>float Math_sech(float n = 0) {</Command>
		<Command>	return(1.0/Math_cosh(n));</Command>
		<Command>}</Command>

		<Command>float Math_cosech(float n = 0) {</Command>
		<Command>	return(1.0/Math_sinh(n));</Command>
		<Command>}</Command>

		<Command>float Math_sqrt(float s = 1.0) { // invent00r</Command>
		<Command>   if (0.0>s) {s = 0.0-s;} //imaginary</Command>
		<Command>   float h = 10.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   h = (h+1.0*s/h)/2.0;</Command>
		<Command>   return((h+1.0*s/h)/2.0);</Command>
		<Command>}</Command>

      <Command>void trVectorNormalize(string v = "") {</Command>
      <Command>   float x = trQuestVarGet(""+v+"x") * trQuestVarGet(""+v+"x");</Command>
      <Command>   float z = trQuestVarGet(""+v+"z") * trQuestVarGet(""+v+"z");</Command>
      <Command>   float s = Math_sqrt(x+z);</Command>
      <Command>   trQuestVarSet(""+v+"x", x / s);</Command>
      <Command>   trQuestVarSet(""+v+"z", z / s);</Command>
      <Command>}</Command>

		<Command>float Math_cbrt(float s = 1.0) { // invent00r</Command>
		<Command>   if (0.0>s) {s = 0.0-s;} //imaginary</Command>
		<Command>   float h = 10.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   h = (h+1.0*s/(h*h))/2.0;</Command>
		<Command>   return((h+1.0*s/(h*h))/2.0);</Command>
		<Command>}</Command>

		<Command>//Vector (X) returns the x+</Command>
		<Command>//Vector (Y) returns the x-</Command>
		<Command>vector Math_QF(float a = 0, float b = 0, float c = 0) { //invent00r</Command>
		<Command>	return(xsVectorSet(((Math_sqrt(b*b-4.0*a*c)-b)/(2.0*a)),((0.0-b-Math_sqrt(b*b-4.0*a*c))/(2.0*a)), 0));</Command>
		<Command>}</Command>

		<Command>float Math_max(float a = 0, float b = 0) { //invent00r</Command>
		<Command>	if(a>b) {return(a);}</Command>
		<Command>	return(b);</Command>
		<Command>}</Command>

		<Command>float Math_min(float a = 0, float b = 0) { //invent00r</Command>
		<Command>	if(a>b)  {return(b);}</Command>
		<Command>	return(a);</Command>
		<Command>}</Command>

		<Command>float Math_dist(vector a = vector(-1,-1,-1), vector b = vector(-1,-1,-1)) { //invent00r</Command>
		<Command>	int x1 = xsVectorGetX(a);  int x2 = xsVectorGetX(b);</Command>
		<Command>	int y1 = xsVectorGetZ(a);  int y2 = xsVectorGetZ(b);</Command>
		<Command>	return(Math_sqrt((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)));</Command>
		<Command>}</Command>

		<Command>float Math_exp(float a = 0) {</Command>
		<Command>	return (Math_pow(e,a));</Command>
		<Command>}</Command>

		<Command>float Math_ln(float a = 0.0, int acc = 1000) { //slow for high accuracy</Command>
		<Command>	float b = Math_intToFloat(a); //we need floats</Command>
		<Command>	float r = 0.0;</Command>
		<Command>	for(n=acc;>0) { //acc should be infinite</Command>
		<Command>		r = r + (1.0/(2.0*n+1.0))*Math_pow((b-1.0)/(b+1.0), 2.0*n+1.0);</Command>
		<Command>	}</Command>
		<Command>	return (2.0*r);</Command>
		<Command>}</Command>

		<Command>float Math_log(float base = 1.0, float resa = 1.0, int acc = 1000) { //slow for high accuracy</Command>
		<Command>	if(resa == 1.0) { return (0.0); }</Command>
		<Command>	return(Math_ln(resa, acc)/Math_ln(base, acc));</Command>
		<Command>}</Command>

		<Command>float Math_log2(float resa = 1, int acc = 1000) {</Command>
		<Command>	return (Math_log(2, resa, acc));</Command>
		<Command>}</Command>

		<Command>float Math_log10(float resa = 1, int acc = 1000) {</Command>
		<Command>	return (Math_log(10, resa, acc));</Command>
		<Command>}</Command>

		<Command>float Math_rand() {</Command>
		<Command>   trQuestVarSetFromRand("TRL_RFG", 0.0, 0.999999999, false);</Command>
		<Command>	return(trQuestVarGet("TRL_RFG"));</Command>
		<Command>}</Command>

		<Command>int Math_sign(float a = 0.0) {</Command>
		<Command>	if(a==0) return (0);</Command>
		<Command>	if(0>a) return (-1);</Command>
		<Command>	return (1);</Command>
		<Command>}</Command>
		
		<Command>bool Math_pointIsInRectangle(vector topLeft = cInvalidVector, vector bottomRight = cInvalidVector, vector point = cInvalidVector) { //invent00r</Command>
		<Command>	int q=xsVectorGetX(topLeft); int w=xsVectorGetZ(topLeft);</Command>
		<Command>	int a=xsVectorGetX(bottomRight); int s=xsVectorGetZ(bottomRight);</Command>
		<Command>	int x=xsVectorGetX(point); int y=xsVectorGetZ(point);</Command>
		<Command>	return (((w>=y)!=true||(y>=s)!=true||(x>=q)!=true||(a>=x)!=true)!=true);</Command>
		<Command>}</Command>
		
		<Command>vector Math_GetVectorial(vector a = vector(-1, 0, -1), vector b = vector(-1, 0, -1), float distance = 2) { //invent00r</Command>
		<Command>	vector c = b-a;</Command>
		<Command>	float d = xsVectorGetZ(b);</Command>
		<Command>	float e = xsVectorGetX(c);</Command>
		<Command>	float f = xsVectorGetZ(c);</Command>
		<Command>	float ee = e*e;</Command>
		<Command>	float ff = f*f;</Command>
		<Command>	return(Math_QF((ff)/(ee)+1.0, (-2.0*ff*d)/(ee)-2.0*d , (ff/ee+1.0)*d*d - distance*distance));</Command>
		<Command>}</Command>

		<Command>vector Math_GetVectorialVector(vector a = vector(-1, 0, -1), vector b = vector(-1, 0, -1), float y = 0.0) { //invent00r</Command>
		<Command>	vector c = b-a;</Command>
		<Command>	float d = xsVectorGetZ(b);</Command>
		<Command>	float e = xsVectorGetX(c);</Command>
		<Command>	float f = xsVectorGetZ(c);</Command>
		<Command>	return(xsVectorSet(0.0-f*y/e+f*d/e + xsVectorGetX(b), 0, y));</Command>
		<Command>}</Command>
		
		<!-- ***************** Debugging **************** -->

		<Command>string getTime(bool MS = false) { // Mythic_Freak</Command>
		<Command>	int hour = 0;</Command>
		<Command>	int min = 0;</Command>
		<Command>	int sec = 0;</Command>
		<Command>	int time = 0;</Command>
		<Command>	string retval = "";</Command>
		<Command>	time = trTimeMS()/1000;</Command>
		<Command>	hour = time/3600;</Command>
		<Command>	time = time - (hour*3600);</Command>
		<Command>	min = time/60;</Command>
		<Command>	time = time -(min*60);</Command>
		<Command>	sec = time;</Command>
		<Command>	if (hour > 0) {</Command>
		<Command>		retval = hour+":";</Command>
		<Command>		if (min >= 10) retval = retval+min+":";</Command>
		<Command>		else retval = retval+0+min+":";</Command>
		<Command>		if (sec >=10) retval = retval+sec;</Command>
		<Command>		else retval = retval+0+sec;</Command>
		<Command>	} else {</Command>
		<Command>		retval = min+":";</Command>
		<Command>		if (sec >=10) retval = retval+sec;</Command>
		<Command>		else retval = retval+0+sec;</Command>
		<Command>	}</Command>
		<Command>	if(MS) retval = retval + ":"+ (trTimeMS()-time);</Command>
		<Command>	return(retval);</Command>
		<Command>}</Command>
		
		<Command>void print(string text = "") { // Mythic_Freak + (((invent00r)))</Command>
		<Command>	trChatSend(0, "print("+getTime(true)+"): "+text);</Command>
		<Command>}</Command>
		
		<!-- ************** QV (invent00r) ************** -->
		
		<Command>rule trStartingSetup_CheckingMultiplayer</Command>
		<Command>	active runImmediately</Command>
		<Command>{</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	<![CDATA[for(i=0;<2867) {]]></Command>
		<Command>	kbUnitPickCreate(""+i);</Command>
		<Command>	kbUnitPickSetMinimumPop(i,-1);</Command>
		<Command>	kbUnitPickSetMaximumPop(i,-1);</Command>
		<Command>	kbUnitPickSetPreferenceWeight(i, -1);}</Command>
		<Command>	kbUnitPickSetMinimumPop(0, -2); // Used to copy/resize arrays</Command>
		<Command>	trBlockAllSounds(false);</Command>
		<Command>	trArmyDispatch("0, 1", "Yardstick", 1, 1, 0, 1, 0, false);</Command>
		<Command>	trUnitSelectClear();</Command>
		<Command>	trUnitSelectByID(kbArmyGetUnitID(1, 0));</Command>
		<Command>	trUnitTeleport(2.00, 0.00, 2.00);</Command>
		<Command>  xsDisableSelf();</Command>
		<Command>}</Command>

		<Command>rule CheckingMultiplayer2</Command>
		<Command>	active</Command>
		<Command>{</Command>
		<Command>   trDelayedRuleActivation("CheckingMultiplayer3");</Command>
		<Command>  xsDisableSelf();</Command>
		<Command>}</Command>

		<Command>rule CheckingMultiplayer3</Command>
		<Command>	inactive</Command>
		<Command>{</Command>
		<Command>	xsSetContextPlayer(0); kbLookAtAllUnitsOnMap();</Command>
		<Command>	if((xsVectorGetX(kbUnitGetPosition(kbArmyGetUnitID(1, 0))))==2.0) {</Command>
		<Command>		isMultiplayer = false;</Command>
		<!--Command>		seed = %luis%; // AoM Vanilla Random will only work offline :o</Command-->
		<Command>	}</Command>
		<Command>	trArmySelect("0, 1");</Command>
		<Command>	trUnitDestroy(); trUnblockAllSounds();</Command>
		<Command>  xsDisableSelf();</Command>
		<Command>}</Command>
		
		<!-- trVectorQuestVarSet()-->
		<Command>void trVectorQuestVarSet(string VQVname = "", vector QVv = vector(-1,-1,-1)) {</Command>
		<Command>	if (VQVname == "") return;</Command>
		<Command>trQuestVarSet(""+VQVname+"X", xsVectorGetX(QVv));</Command>
      <Command>trQuestVarSet(""+VQVname+"Y", xsVectorGetY(QVv));</Command>
      <Command>trQuestVarSet(""+VQVname+"Z", xsVectorGetZ(QVv));</Command>
		<Command>}</Command>
		
		<!-- trVectorQuestVarGet()-->
		<Command>vector trVectorQuestVarGet(string VQVname = "") {</Command>
		<Command>	if (VQVname == "") { return(vector(-1,-1,-1)); }</Command>
		<Command>	vector ret = xsVectorSet(trQuestVarGet(""+VQVname+"X"),trQuestVarGet(""+VQVname+"Y"),trQuestVarGet(""+VQVname+"Z"));</Command>
      <Command>return(ret);</Command>
		<Command>}</Command>
		
		<!-- trVectorQuestVarGetX()-->
		<Command>float trVectorQuestVarGetX(string VQVname = "") {</Command>
		<Command>	if (VQVname == "") return(-1);</Command>
      <Command>   return(trQuestVarGet(""+VQVname+"X"));</Command>
		<Command>}</Command>
		
		<!-- trVectorQuestVarGetY()-->
		<Command>float trVectorQuestVarGetY(string VQVname = "") {</Command>
		<Command>	if (VQVname == "") return(-1);</Command>
      <Command>   return(trQuestVarGet(""+VQVname+"Y"));</Command>
		<Command>}</Command>
		
		<!-- trVectorQuestVarGetZ()-->
		<Command>float trVectorQuestVarGetZ(string VQVname = "") {</Command>
		<Command>	if (VQVname == "") return(-1);</Command>
		<Command>	return(trQuestVarGet(""+VQVname+"Z"));</Command>
		<Command>}</Command>
		 
		<!-- trVectorQuestVarEcho()-->
		<Command>void trVectorQuestVarEcho(string VQVname = "") {</Command>
		<Command>	if (VQVname == "") return;</Command>
		<Command>	trChatSend(0, ""+VQVname+": "+trVectorQuestVarGet(VQVname));</Command>
		<Command>}</Command>
		
		<!-- trStringQuestVarSet()-->
		<Command>void trStringQuestVarSet(string SQVname = "", string SQVvalue = "") {</Command>
		<Command>	if (SQVname == "") { return;}</Command>
		<!--Command>	if (SQVvalue == "") { return;}</Command-->
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("SQV_"+SQVname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>		kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>	} else {</Command>
		<Command>		kbArmyDestroy(kbUnitPickGetMaximumPop(i));</Command>
		<Command>	}</Command>
		<Command>	kbUnitPickSetMaximumPop(i, kbArmyCreate(SQVvalue));</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>}</Command>
		
		<!-- trStringQuestVarGet()-->
		<Command>string trStringQuestVarGet(string SQVname = "") {</Command>
		<Command>	if (SQVname == "") return("-1.#IND00");</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	string ret = "";</Command>
		<Command>	int idd = kbUnitQueryCreate("SQV_"+SQVname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if(kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>		kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>	} else {</Command>
		<Command>		if(kbUnitPickGetMaximumPop(i) != -1) ret = kbArmyGetName(kbUnitPickGetMaximumPop(i));</Command>
		<Command>	}</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>
		
		<!-- trStringQuestVarEcho()-->
		<Command>void trStringQuestVarEcho(string SQVname = "") {</Command>
		<Command>	if (SQVname == "") return;</Command>
		<Command>	trChatSend(0, ""+SQVname+": "+trStringQuestVarGet(SQVname));</Command>
		<Command>}</Command>
		
		<!-- trQuestVarArmySet()-->
		<Command>void trQuestVarArmySet(string QVAname = "", vector army = vector (-1, -1, -1)) {</Command>
		<Command>	if (QVAname == "") return;</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QV_"+QVAname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>	}</Command>
		<Command>	kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>	kbUnitPickSetPreferenceWeight(i, xsVectorGetX(army));</Command>
		<Command>	kbUnitPickSetMaximumPop(i, xsVectorGetY(army));</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>}</Command>

		<!-- trQuestVarArmyGet()-->
		<Command>string trQuestVarArmyGet(string QVAname = "") {</Command>
		<Command>	if (QVAname == "") { return("-1, -1");}</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QV_"+QVAname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>	if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>		kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>		kbUnitPickSetPreferenceWeight(i, 0);</Command>
		<Command>	}</Command>
		<Command>	string ret = ""+(1*kbUnitPickGetPreferenceWeight(i))+","+kbUnitPickGetMaximumPop(i);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>
		
		<!-- trQuestVarArmyGetID()-->
		<Command>int trQuestVarArmyGetID(string QVAname = "") { // invent00r + Mythic_Freak</Command>
		<Command>	if (QVAname == "") { return(-1);}</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QV_"+QVAname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>	if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>		kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>		kbUnitPickSetPreferenceWeight(i, 0);</Command>
		<Command>	}</Command>
		<Command>	int ret = kbUnitPickGetMaximumPop(i);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>

		<!-- trQuestVarArmyGetPlayerID()-->
		<Command>int trQuestVarArmyGetPlayerID(string QVAname = "") {</Command>
		<Command>	if (QVAname == "") { return(-1);}</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QV_"+QVAname);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>	if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>		kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>		kbUnitPickSetPreferenceWeight(i, 0);</Command>
		<Command>	}</Command>
		<Command>	int ret = kbUnitPickGetPreferenceWeight(i);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>
		
		<!-- trQuestVarArmyGetEcho()-->
		<Command>void trQuestVarArmyEcho(string QVAname = "") { // invent00r + Mythic_Freak</Command>
		<Command>	if (QVAname == "") return;</Command>
		<Command>	trChatSend(0, ""+QVAname+": Player("+trQuestVarArmyGetPlayerID(QVAname)+") Army("+trQuestVarArmyGetID(QVAname)+")");</Command>
		<Command>}</Command>

		<!-- xsArrayGetID()-->
		<Command>int xsArrayGetID(string ArrayName = "") {</Command>
		<Command>	if (ArrayName == "") return(-1);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	   return(-1); }</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(i);</Command>
		<Command>}</Command>

		<!-- xsArrayGetSizeByName()-->
		<Command>vector xsArrayGetSizeByName(string ArrayName = "") {</Command>
		<Command>	if (ArrayName == "") return(cInvalidVector);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	   return(cInvalidVector); }</Command>
		<Command>	int sizeY = kbUnitPickGetDesiredNumberBuildings(i, 1);</Command>
		<Command>	vector ret = xsVectorSet((kbUnitPickGetDesiredNumberUnitTypes(i)-2)/2/sizeY, sizeY, 0);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>

		<!-- xsArrayGetSizeXByName()-->
		<Command>int xsArrayGetSizeXByName(string ArrayName = "") {</Command>
		<Command>  return(1*xsVectorGetX(xsArrayGetSizeByName(ArrayName)));</Command>
		<Command>}</Command>

		<!-- xsArrayGetSizeYByName()-->
		<Command>int xsArrayGetSizeYByName(string ArrayName = "") {</Command>
		<Command>  return(1*xsVectorGetY(xsArrayGetSizeByName(ArrayName)));</Command>
		<Command>}</Command>

		<!-- xsArrayGetSize()-->
		<Command>vector xsArrayGetSize(int Aid = -1) {</Command>
		<Command>	if (0 >= Aid) return(cInvalidVector);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int sizeY = kbUnitPickGetDesiredNumberBuildings(Aid, 1);</Command>
		<Command>	vector ret = xsVectorSet((kbUnitPickGetDesiredNumberUnitTypes(Aid)-2)/2/sizeY, sizeY, 0);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>

		<!-- xsArrayGetSizeX()-->
		<Command>int xsArrayGetSizeX(int Aid = -1) {</Command>
		<Command>  return(1*xsVectorGetX(xsArrayGetSize(Aid)));</Command>
		<Command>}</Command>

		<!-- xsArrayGetSizeY()-->
		<Command>int xsArrayGetSizeY(int Aid = -1) {</Command>
		<Command>  return(1*xsVectorGetY(xsArrayGetSize(Aid)));</Command>
		<Command>}</Command>

		<!-- xsArraySetDefaultValue()-->
		<Command>bool xsArraySetDefaultValue(int Aid = -1, float defaultvalue = -1.0) {</Command>
		<Command>	if (1 > Aid) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	kbUnitPickSetPreferenceWeight(Aid, defaultvalue);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArrayGetDefaultValue()-->
		<Command>float xsArrayGetDefaultValue(int Aid = -1) {</Command>
		<Command>	if (1 > Aid) return(-1.0);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	float ret = kbUnitPickGetPreferenceWeight(Aid);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>

		<Command>mutable bool xsArrayResize(int Aid = -1, int newSizeX = -1, int newSizeY = -1) {}</Command>

		<!-- xsArraySetByName()-->
		<Command>bool xsArraySetByName(string ArrayName = "", float value = 0, int posX = -1, int posY = 1) {</Command>
		<Command>	if (ArrayName == "") return(false);</Command>
		<Command>	if (0 >= posX) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	   return(false); }</Command>
		<Command>	if (posX > xsArrayGetSizeX(i))</Command>
		<Command>		 xsArrayResize(i, posX);</Command>
		<Command>	if (posY > xsArrayGetSizeY(i))</Command>
		<Command>		 xsArrayResize(i, xsArrayGetSizeX(i), posY);</Command>
		<Command>	int wPos = (kbUnitPickGetDesiredNumberBuildings(i, 1)*2)*(posX-1)+posY*2;</Command>
		<Command>	if(value == 0) { kbUnitPickSetDesiredNumberBuildings(i, wPos, 2); value = 1.0; }</Command>
		<Command>	else if(0.0 > value) { kbUnitPickSetDesiredNumberBuildings(i, wPos, 1); value = -1.0*value; }</Command>
		<Command>	else { kbUnitPickSetDesiredNumberBuildings(i, wPos, 3); }</Command>
		<Command>	kbUnitPickSetDesiredNumberBuildings(i, wPos+1, value*10000.0);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArraySet()-->
		<Command>bool xsArraySet(int Aid = -1, float value = 0.0, int posX = -1, int posY = 1) {</Command>
		<Command>	if (0 >= Aid) return(false);</Command>
		<Command>	if (0 >= posX) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	if (posX > xsArrayGetSizeX(Aid))</Command>
		<Command>		 xsArrayResize(Aid, posX);</Command>
		<Command>	if (posY > xsArrayGetSizeY(Aid))</Command>
		<Command>		 xsArrayResize(Aid, xsArrayGetSizeX(Aid), posY);</Command>
		<Command>	int wPos = (kbUnitPickGetDesiredNumberBuildings(Aid, 1)*2)*(posX-1)+posY*2;</Command>
		<Command>	if(value == 0) { kbUnitPickSetDesiredNumberBuildings(Aid, wPos, 2); value = 1.0; }</Command>
		<Command>	else if(0 > value) { kbUnitPickSetDesiredNumberBuildings(Aid, wPos, 1); value = -1.0*value; }</Command>
		<Command>	else { kbUnitPickSetDesiredNumberBuildings(Aid, wPos, 3); }</Command>
		<Command>	bool ret = kbUnitPickSetDesiredNumberBuildings(Aid, wPos+1, value*10000.0);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>

		<Command>mutable float xsArrayGet(int Aid = -1, int posX = -1, int posY = 1) {}</Command>

		<!-- xsArrayFill()-->
		<Command>bool xsArrayFill(int Aid = -1, float defaultvalue = -1.0, float replaceVal = 16777215.0) {</Command>
		<Command>	if(1 > Aid) return(false);</Command>
		<Command>	if(replaceVal != 16777215.0) {</Command>
		<Command>		for(i=xsArrayGetSizeX(Aid);>0)</Command>
		<Command>			for(j=xsArrayGetSizeY(Aid);>0)</Command>
		<Command>				if(xsArrayGet(Aid, i, j) == replaceVal)</Command>
		<Command>					xsArraySet(Aid, defaultvalue, i, j);</Command>
		<Command>	} else {</Command>
		<Command>		for(i=xsArrayGetSizeX(Aid);>0)</Command>
		<Command>			for(j=xsArrayGetSizeY(Aid);>0)</Command>
		<Command>				xsArraySet(Aid, defaultvalue, i, j);</Command>
		<Command>	}</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArrayFillByName()-->
		<Command>bool xsArrayFillByName(string ArrayName = "", float defaultvalue = -1.0, float replaceVal = 16777215.0) {</Command>
		<Command>	if(ArrayName == "") return(false);</Command>
		<Command>  return(xsArrayFill(xsArrayGetID(ArrayName), defaultvalue, replaceVal));</Command>
		<Command>}</Command>

		<!-- xsArrayResize()-->
		<Command>bool xsArrayResize(int Aid = -1, int newSizeX = -1, int newSizeY = -1) {</Command>
		<Command>	if (1 > Aid) return(false);</Command>
		<Command>	if (1 > newSizeX) return(false);</Command>
		<Command>	if (1 > newSizeY) newSizeY = xsArrayGetSizeY(Aid);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	print("Resizing Array("+Aid+") to "+newSizeX+"x"+newSizeY+".");</Command>
		<Command>	int totalSize = kbUnitPickGetDesiredNumberUnitTypes(Aid);</Command>
		<Command>	int newSize = 2+(newSizeY*2)*(newSizeX);</Command>
		<Command>	int defaultvalue = kbUnitPickGetPreferenceWeight(Aid);</Command>
		<Command>	kbUnitPickSetDesiredNumberUnitTypes(0, newSize, 1, false);</Command>
		<Command>   <![CDATA[for(i=0; <totalSize)]]></Command>
		<Command>		kbUnitPickSetDesiredNumberBuildings(0, i, kbUnitPickGetDesiredNumberBuildings(Aid, i));</Command>
		<Command>	kbUnitPickSetDesiredNumberUnitTypes(Aid, newSize, 1, false);</Command>
		<Command>   <![CDATA[for(i=0; <newSize)]]></Command>
		<Command>		kbUnitPickSetDesiredNumberBuildings(Aid, i, kbUnitPickGetDesiredNumberBuildings(0, i));</Command>
		<Command>	kbUnitPickSetDesiredNumberBuildings(Aid, 0, newSizeX);</Command>
		<Command>	kbUnitPickSetDesiredNumberBuildings(Aid, 1, newSizeY);</Command>
		<Command>	xsArrayFill(Aid, defaultvalue, -0.0001);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArrayCreate()-->
		<Command>int xsArrayCreate(string ArrayName = "", int dimX = 0, int dimY = 1, float defaultvalue = -1.0) {</Command>
		<Command>	if (ArrayName == "") return(-1);</Command>
		<Command>	if (0 >= dimX) return(-1);</Command>
		<Command>	if (0 >= dimY) return(-1);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd)  {</Command>
		<Command>			xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	   	   return(false); }</Command>
		<Command>	if (i == trQuestVarsN) {</Command>
		<Command>		<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>			if (kbUnitPickGetMinimumPop(i) == -1) break;</Command>
		<Command>		trQuestVarsN = trQuestVarsN+1;</Command>
		<Command>	}</Command>
		<Command>	kbUnitPickSetMinimumPop(i,idd);</Command>
		<Command>	kbUnitPickSetDesiredNumberUnitTypes(i, 2+(dimY*2)*(dimX) , 1, false);</Command>
		<Command>	kbUnitPickSetDesiredNumberBuildings(i, 0, dimX);</Command>
		<Command>	kbUnitPickSetDesiredNumberBuildings(i, 1, dimY);</Command>
		<Command>	kbUnitPickSetPreferenceWeight(i, defaultvalue);</Command>
		<Command>	if (defaultvalue != -0.0001)</Command>
		<Command>		<![CDATA[for(x=1; <= dimX)]]></Command>
		<Command>			<![CDATA[for(y=1; <= dimY)]]></Command>
		<Command>				xsArraySet(i, defaultvalue, x, y);</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  	return(i);</Command>
		<Command>}</Command>

		<!-- xsArrayGetByName()-->
		<Command>float xsArrayGetByName(string ArrayName = "", int posX = -1, int posY = 1) {</Command>
		<Command>	if (ArrayName == "") return(-1.0);</Command>
		<Command>	if (0 >= posX) return(-1.0);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(i=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(i) == idd) break;</Command>
		<Command>	if(i == trQuestVarsN) {</Command>
		<Command>		xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	  	return(-1.0); }</Command>
		<Command>	int wPos = (posX - 1)*2*kbUnitPickGetDesiredNumberBuildings(i, 1)+posY*2;</Command>
		<Command>	float ret = 0.0001*((kbUnitPickGetDesiredNumberBuildings(i, wPos)-2.0)*(1.0*kbUnitPickGetDesiredNumberBuildings(i, wPos+1)));</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>

		<!-- xsArrayGet()-->
		<Command>float xsArrayGet(int Aid = -1, int posX = -1, int posY = 1) {</Command>
		<Command>	if (0 >= Aid) return(-1.0);</Command>
		<Command>	if (0 >= posX || 0 >= posY) return(-1.0);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int wPos = (posX - 1)*2*kbUnitPickGetDesiredNumberBuildings(Aid, 1)+posY*2;</Command>
		<Command>	float ret = 0.0001*((kbUnitPickGetDesiredNumberBuildings(Aid, wPos)-2.0)*(1.0*kbUnitPickGetDesiredNumberBuildings(Aid, wPos+1)));</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(ret);</Command>
		<Command>}</Command>
		
		<!-- xsArrayEcho -->
		<Command>void xsArrayEcho(string AName = "", int posX = -1, int posY = 1) { // Mythic_Freak + invent00r</Command>
		<Command>	if(AName == "" || posX == -1 || posY == -1) return;</Command>
		<Command>	trChatSend(0, AName+"["+posX+"]["+posY+"]: "+xsArrayGetByName(AName, posX, posY));</Command>
		<Command>}</Command>
		
		<!-- xsArrayEchoAll -->
		<Command>void xsArrayEchoAll(string AName = "") { // Mythic_Freak + invent00r</Command>
		<Command>	if(AName == "") return;</Command>
		<Command>	<![CDATA[for(i=1;<=xsArrayGetSizeXByName(AName))]]></Command>
		<Command>		<![CDATA[for(j=1;<=xsArrayGetSizeYByName(AName))]]></Command>
    	<Command>			trChatSend(0, AName+"["+i+"]["+j+"]: "+xsArrayGetByName(AName, i, j));</Command>
		<Command>}</Command>
		
		<!-- xsArrayEchoAll2 (matrix formation) -->
		<Command>void xsArrayEchoAll2(string AName = "") { // invent00r + Mythic_Freak</Command>
		<Command>	if(AName == "") return;</Command>
		<Command>	string chat1 = "";</Command>
		<Command>	<![CDATA[for(i=1;<=xsArrayGetSizeYByName(AName)) {]]></Command>
		<Command>		chat1 = AName+"["+i+"][]: [ ";</Command>
		<Command>		<![CDATA[for(j=1;<=xsArrayGetSizeXByName(AName)) {]]></Command>
		<Command>			chat1 = chat1 + xsArrayGetByName(AName, j, i) + " | ";</Command>
    	<Command>			if(j==xsArrayGetSizeXByName(AName)-1) trChatSend(0, chat1+xsArrayGetByName(AName, j+1, i)+" ]"); // send output on last loop</Command>
		<Command>		}</Command>
		<Command>	}</Command>
		<Command>}</Command>
		
		<!-- xsArrayEqual -->
		<Command>bool xsArrayEqual(string AName1 = "", string AName2 = "") { // Mythic_Freak + Fixed by invent00r</Command>
		<Command>	if(AName1 == AName2) return(true);</Command>
		<Command>	if(xsArrayGetSizeXByName(AName1) != xsArrayGetSizeXByName(AName2) || xsArrayGetSizeYByName(AName1) != xsArrayGetSizeYByName(AName2)) return(false);</Command>
		<Command>	bool ret = true;</Command>
		<Command>	<![CDATA[for(i=1;<=xsArrayGetSizeXByName(AName1))]]></Command>
		<Command>		<![CDATA[for(j=1;<=xsArrayGetSizeYByName(AName1))]]></Command>
		<Command>			<![CDATA[ret = ret && (xsArrayGetByName(AName1, i, j) == xsArrayGetByName(AName2, i, j));]]></Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>
		
		<!-- xsArraySwapByName()-->
		<Command>bool xsArraySwapByName(string ArrayName = "", int lineA = 1, int lineB = 2) {</Command>
		<Command>	if (ArrayName == "") return(false);</Command>
		<Command>	if (0 >= lineA || 0 >= lineB) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int idd = kbUnitQueryCreate("QA_"+ArrayName);</Command>
		<Command>	<![CDATA[for(Aid=0;<trQuestVarsN)]]></Command>
		<Command>		if (kbUnitPickGetMinimumPop(Aid) == idd) break;</Command>
		<Command>	if(Aid == trQuestVarsN) {</Command>
		<Command>		xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	   return(false); }</Command>
		<Command>	float temp = -1.0;</Command>
		<Command>	<![CDATA[for(i=1; <xsArrayGetSizeY(Aid)) {]]></Command>
		<Command>		temp = xsArrayGet(Aid, lineA, i);</Command>
		<Command>		xsArraySet(Aid, xsArrayGet(Aid, lineB, i), lineA, i);</Command>
		<Command>		xsArraySet(Aid, temp, lineB, i);</Command>
		<Command>	}</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArraySwap()-->
		<Command>bool xsArraySwap(int Aid = -1, int lineA = 1, int lineB = 2) {</Command>
		<Command>	if (0 >= Aid) return(false);</Command>
		<Command>	if (0 >= lineA || 0 >= lineB) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	float temp = -1.0;</Command>
		<Command>	<![CDATA[for(i=1; <xsArrayGetSizeY(Aid)+1) {]]></Command>
		<Command>		temp = xsArrayGet(Aid, lineA, i);</Command>
		<Command>		xsArraySet(Aid, xsArrayGet(Aid, lineB, i), lineA, i);</Command>
		<Command>		xsArraySet(Aid, temp, lineB, i);</Command>
		<Command>	}</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArraySort()-->
		<Command>bool xsArraySort(int Aid = -1, int posY = 1, bool Descending = false) {</Command>
		<Command>	if (0 >= Aid) return(false);</Command>
		<Command>	if (0 >= posY) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>   int totalSize = xsArrayGetSizeX(Aid)+1; </Command>
		<Command>   int AChecks = totalSize/2+1;</Command>
		<Command>   int BChecks = totalSize/2+1;</Command>
		<Command>   if (totalSize/2 %mod% 1.0 == 0) BChecks--; // Even</Command>
		<Command>	if(Descending) {</Command>
		<Command>		<![CDATA[for(Array=0; <totalSize) {]]></Command>
		<Command>			<![CDATA[for(i=1; <AChecks) {]]></Command>
		<Command>				if(-1.0*xsArrayGet(Aid, i*2-1, posY) > -1.0*xsArrayGet(Aid, i*2, posY))</Command>
		<Command>					xsArraySwap(Aid, i*2-1, i*2);</Command>
		<Command>			}</Command>
		<Command>			<![CDATA[for(i=1; <BChecks) {]]></Command>
		<Command>				if(-1.0*xsArrayGet(Aid, i*2, posY) > -1.0*xsArrayGet(Aid, i*2+1, posY))</Command>
		<Command>					xsArraySwap(Aid, i*2, i*2+1);</Command>
		<Command>			}</Command>
		<Command>		}</Command>
		<Command>	} else {</Command>
		<Command>		<![CDATA[for(Array=0; <totalSize) {]]></Command>
		<Command>			<![CDATA[for(i=1; <AChecks) {]]></Command>
		<Command>				if(xsArrayGet(Aid, i*2-1, posY) > xsArrayGet(Aid, i*2, posY))</Command>
		<Command>					xsArraySwap(Aid, i*2-1, i*2);</Command>
		<Command>			}</Command>
		<Command>			<![CDATA[for(i=1; <BChecks) {]]></Command>
		<Command>				if(xsArrayGet(Aid, i*2, posY) > xsArrayGet(Aid, i*2+1, posY))</Command>
		<Command>					xsArraySwap(Aid, i*2, i*2+1);</Command>
		<Command>			}</Command>
		<Command>		}</Command>
		<Command>	}</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- xsArrayFind()-->
		<Command>int xsArrayFind(int Aid = -1, int posY = 1, int nFind = 0) {</Command>
		<Command>	if (0 >= Aid) return(-1);</Command>
		<Command>	if (0 >= posY) return(-1);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int ret = -1;</Command>
		<Command>	<![CDATA[for(i=1; <xsArrayGetSizeX(Aid)+1) {]]></Command>
		<Command>		if(xsArrayGet(Aid, i, posY) == nFind) {</Command>
		<Command>			ret = i;</Command>
		<Command>			break;</Command>
		<Command>		}</Command>
		<Command>	}</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>

		<!-- xsArrayDelete()-->
		<Command>bool xsArrayDelete(int Aid = -1, int posX = 1) {</Command>
		<Command>	if (0 >= Aid) return(false);</Command>
		<Command>	if (0 >= posX) return(false);</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(0);</Command>
		<Command>	int sizeX = xsArrayGetSizeX(Aid);</Command>
		<Command>	if (sizeX >= posX) {</Command>
		<Command>		<![CDATA[for(i=posX; <=sizeX-posX+2) {]]></Command>
		<Command>			xsArraySwap(Aid, i, i+1);</Command>
		<Command>		}</Command>
		<Command>		xsArrayResize(Aid, sizeX-1);</Command>
		<Command>	}</Command>
		<Command>   xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>  return(true);</Command>
		<Command>}</Command>

		<!-- ********************* UI ********************* -->
		<Command>bool uiSelectUnit(int playerID=1, string unitName="-1") { //((Mythic_Freak)) + invent00r</Command>
		<Command>	int oldPlayer = trCurrentPlayer();</Command>
		<Command>	trBlockAllSounds(false);</Command>
    	<Command>   trPlayerSetActive(playerID);</Command>
    	<Command>   trUnitSelectClear();</Command>
		<Command>   trUnitSelect(unitName);</Command>
		<Command>   int err = 0;</Command>
		<Command>	string protoID = kbGetProtoUnitName(kbGetUnitBaseTypeID(kbGetBlockID(unitName)));</Command>
		<Command>   if(trUnitIsOwnedBy(playerID)) {</Command>
		<Command>      	if(trUnitAlive()) {</Command>
		<Command>         	while(trUnitIsSelected() == false) {</Command> 
		<Command>           	err++;</Command>
		<Command>           	uiFindType(protoID);</Command>
		<Command>           	if(err>200) {trChatSend(0, "200 errors, unit not found."); break;}</Command>
		<Command>       	}</Command>
		<Command>   	}</Command>
		<Command>   }</Command>
		<Command>	trPlayerSetActive(oldPlayer);</Command>
		<Command>	trUnblockAllSounds();</Command>
		<Command>	return (200 >= err);</Command>
		<Command>}</Command>
		
		<Command>bool uiSelectUnitByID(int playerID=1, int unitID=-1) { //((Mythic_Freak)) + invent00r</Command>
		<Command>	int oldPlayer = trCurrentPlayer();</Command>
		<Command>	trBlockAllSounds(false);</Command>
    	<Command>   trPlayerSetActive(playerID);</Command>
    	<Command>   trUnitSelectClear();</Command>
		<Command>   trUnitSelectByID(unitID);</Command>
		<Command>   int err = 0;</Command>
		<Command>	string protoID = kbGetProtoUnitName(kbGetUnitBaseTypeID(unitID));</Command>
		<Command>   if(trUnitIsOwnedBy(playerID)) {</Command>
		<Command>      	if(trUnitAlive()) {</Command>
		<Command>         	while(trUnitIsSelected() == false) {</Command> 
		<Command>           	err++;</Command>
		<Command>           	uiFindType(protoID);</Command>
		<Command>           	if(err>200) {trChatSend(0, "200 errors, unit not found."); break;}</Command>
		<Command>       	}</Command>
		<Command>   	}</Command>
		<Command>   }</Command>
		<Command>	trPlayerSetActive(oldPlayer);</Command>
		<Command>	trUnblockAllSounds();</Command>
		<Command>	return (200 >= err);</Command>
		<Command>}</Command>
		
		<Command>void uiResetCamera() { // Mythic_Freak</Command>
		<!--Command>	cameraNice();</Command-->
		<!--Command>	cameraLimit(1);</Command-->
		<!--Command>	cameraLimit(0);</Command-->
		<Command>	configSetInt("limitPitch",45);</Command>
		<Command>	configSetInt("minZoom",50);</Command>
		<Command>	cameraRotate();</Command>
		<Command>	cameraRotate();</Command>
		<Command>}</Command>
		
		<Command>void uiRandomLightning() { //nottud</Command>
		<Command>	trQuestVarSetFromRand("1R", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("1G", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("1B", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("2R", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("2G", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("2B", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("3R", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("3G", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("3B", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("4R", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("4G", 0, 255, false);</Command>
		<Command>	trQuestVarSetFromRand("4B", 0, 255, false);</Command>
		<Command>	fakeSpecularSunColor(trQuestVarGet("1R"),trQuestVarGet("1G"),trQuestVarGet("1B"));</Command>
		<Command>	terrainAmbient(trQuestVarGet("2R"),trQuestVarGet("2G"),trQuestVarGet("2B"));</Command>
		<Command>	sunColor(trQuestVarGet("3R"),trQuestVarGet("3G"),trQuestVarGet("3B"));</Command>
		<Command>	ambientColor(trQuestVarGet("4R"),trQuestVarGet("4G"),trQuestVarGet("4B"));</Command>
		<Command>}</Command>
		
		<Command>void uiHeroizeUnit(string unitName="", int playerID=-1) { //Mythic_Freak</Command>
		<Command>	uiSelectUnit(playerID, unitName);</Command>
		<Command>	//brute force, 1 will work eventually</Command>
		<Command>	uiTransformSelectedUnit("Villager Atlantean Hero");</Command>
		<Command>	uiTransformSelectedUnit("Swordsman Hero");</Command>
		<Command>	uiTransformSelectedUnit("Javelin Cavalry Hero");</Command>
		<Command>	uiTransformSelectedUnit("Trident Soldier Hero");</Command>
		<Command>	uiTransformSelectedUnit("Royal Guard Hero");</Command>
		<Command>	uiTransformSelectedUnit("Lancer Hero");</Command>
		<Command>	uiTransformSelectedUnit("Archer Atlantean Hero");</Command>
		<Command>	uiTransformSelectedUnit("Oracle Hero");</Command>
		<Command>	uiTransformSelectedUnit("Maceman Hero");</Command>
		<Command>}</Command>
		
		<Command>void uiSelectType(string type="") { // Mythic_Freak</Command>
		<Command>	trBlockAllSounds(false);</Command>
		<Command>	trackInsert();</Command>
		<Command>	trackAddWaypoint();</Command>
		<Command>	uiFindType(type);</Command>
		<Command>	trackPlay(1,-1);</Command>
		<Command>	trUnblockAllSounds();</Command>
		<Command>}</Command>
		
		<Command>void uiSelectIdleType(string type="") { // Mythic_Freak</Command>
		<Command>	trBlockAllSounds(false);</Command>
		<Command>	trackInsert();</Command>
		<Command>	trackAddWaypoint();</Command>
		<Command>	uiFindIdleType(type);</Command>
		<Command>	trackPlay(1,-1);</Command>
		<Command>	trUnblockAllSounds();</Command>
		<Command>}</Command>
		
		<Command>void uiTrainUnit(string protoUnit = "", string buildingUnitName = "-1", bool repeat = false, int playerID = -1) { // Mythic_Freak + invent00r</Command>
		<Command>   trQuestVarsOP = xsGetContextPlayer();</Command>
		<Command>	xsSetContextPlayer(playerID);</Command>
		<Command>	trBlockAllSounds(false);</Command>
		<Command>	trackInsert();</Command>
		<Command>	trackAddWaypoint();</Command>
		<Command>	uiSelectUnit(playerID, buildingUnitName);</Command>
		<Command>	tis(protoUnit);</Command>
		<Command>	if(repeat == true) uiToggleBuildingQueue();</Command>
		<Command>	trackPlay(1,-1);</Command>
		<Command>	trUnblockAllSounds();</Command>
		<Command>	xsSetContextPlayer(trQuestVarsOP);</Command>
		<Command>}</Command>
		
		<Command>rule initContextArray</Command>
		<Command>	active runImmediately</Command>
		<Command>{</Command>
		<Command>	xsArrayCreate("contextArray", 10, 1, -1.0);</Command>
		<Command>  xsDisableSelf();</Command>
		<Command>}</Command>
		
		<Command>void xsSaveAndSetContextPlayer(int playerID = -1) { // Mythic_Freak</Command>
		<Command>	xsArraySetByName("contextArray", xsGetContextPlayer(), contextIndex, 1); //store current player</Command>
		<Command>	contextIndex++; //update index</Command>
		<Command>	xsSetContextPlayer(playerID); //change context</Command>
		<Command>}</Command>
		
		<Command>void xsRestoreContextPlayer() { // Mythic_Freak</Command>
		<Command>	contextIndex--; //update index</Command>
		<Command>	xsSetContextPlayer(1*xsArrayGetByName("contextArray", contextIndex, 1)); //restore player</Command>
		<Command>	xsArraySetByName("contextArray", -1, contextIndex, 1); //clear playerID</Command>
		<Command>}</Command>
		
		<!-- ******************** MISC ******************** -->
		
		<Command>bool kbIsMultiplayer(void) { // invent00r</Command>
		<Command>  return(isMultiplayer);</Command>
		<Command>}</Command>
	
		<Command>int trGetUnitOwnerByID(int unitID=-1) { // Mythic_Freak</Command>
		<Command>   trUnitSelectClear();</Command>
	    <Command>   trUnitSelectByID(unitID);</Command>
		<Command>   for(p=cNumberPlayers-1;>=0) {</Command>
		<Command>      if(trUnitIsOwnedBy(p)) break;</Command>
		<Command>   }</Command>
		<Command>   return (p);</Command>
		<Command>}</Command>
		
		<Command>int trGetUnitOwner(string unitName="0") { // Mythic_Freak</Command>
		<Command>   trUnitSelectClear();</Command>
	    <Command>   trUnitSelect(unitName);</Command>
		<Command>   for(p=cNumberPlayers-1;>=0) {</Command>
		<Command>      if(trUnitIsOwnedBy(p)) break;</Command>
		<Command>   }</Command>
		<Command>   return (p);</Command>
		<Command>}</Command>
		
		<Command>void enterEditorMode() { // nottud</Command>
		<Command>	subModeEnter("Simulation", "Editor");</Command>
		<Command>}</Command>
		
		<Command>void leaveEditorMode() { // nottud</Command>
		<Command>	subModeLeave("Simulation", "Editor");</Command>
		<Command>	modeEnter("pregame");</Command>
		<Command>	modeEnter("Simulation");</Command>
		<Command>	subModeEnter("Simulation", "Singleplayer");</Command>
		<Command>}</Command>
		
		<Command>void trRunEditorConsoleCommand(string cmd = "") { // nottud</Command>
		<Command>	enterEditorMode();</Command>
		<Command>	uiMessageBox("moo",cmd);</Command>
		<Command>	uiCycleCurrentActivate();</Command>
		<Command>	leaveEditorMode();</Command>
		<Command>}</Command>
		
		<Command>int getUnit(int unittype = -1, int action = -1, vector center = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	int ret = -1;</Command>
		<Command>	int count = -1;</Command>
		<Command>	int unitQueryID = kbUnitQueryCreate("unit");</Command>
		<Command>	kbUnitQuerySetPlayerID(unitQueryID, cMyID);</Command>
		<Command>	kbUnitQuerySetState(unitQueryID, cUnitStateAliveOrBuilding);</Command>
		<Command>	if (unittype != -1) kbUnitQuerySetUnitType(unitQueryID, unittype);</Command>
		<Command>	if (action != -1) kbUnitQuerySetActionType(unitQueryID, action);</Command>
		<Command>	if (center != vector(-1,-1,-1))	{</Command>
		<Command>		kbUnitQuerySetPosition(unitQueryID, center);</Command>
		<Command>		kbUnitQuerySetAscendingSort(unitQueryID, true);</Command>
		<Command>	}</Command>
		<Command>	kbUnitQueryResetResults(unitQueryID);</Command>
		<Command>	count = kbUnitQueryExecute(unitQueryID);</Command>
		<Command>	if (count>0) {</Command>
		<Command>		if (center != vector(-1,-1,-1)) ret = kbUnitQueryGetResult(unitQueryID, 0); // closest unit</Command>
		<Command>		else ret = kbUnitQueryGetResult(unitQueryID, 1*Math_rand()*count); // random unit</Command>
		<Command>	} else {ret = -1;} //failed</Command>
		<Command>	return(ret);</Command>
		<Command>}</Command>
		
		<Command>int kbUnitQueryCreate2(string qname="", int unittype = -1, int action = -1, int statea = -1, int playera = -1, vector center = cInvalidVector, bool sort = false, float radiusa = -1) { //Mythic_Freak</Command>
		<Command>	if(qname == "") return (-1);</Command>
		<Command>	int queryID = kbUnitQueryCreate(qname);</Command>
		<Command>	if(playera != -1) kbUnitQuerySetPlayerID(queryID, playera);</Command>
		<Command>	if(unittype != -1) kbUnitQuerySetUnitType(queryID, unittype);</Command>
		<Command>	if(action != -1) kbUnitQuerySetActionType(queryID, action);</Command>
		<Command>	if(statea != -1) kbUnitQuerySetState(queryID, statea);</Command>
		<Command>	if(center != vector(-1,-1,-1)) {</Command>
      	<Command>		kbUnitQuerySetPosition(queryID, center);</Command>
      	<Command>		if (sort == true) kbUnitQuerySetAscendingSort(queryID, true);</Command>
      	<Command>		if (radiusa != -1) kbUnitQuerySetMaximumDistance(queryID, radiusa);</Command>
   		<Command>	}</Command>
   		<Command>	kbUnitQueryResetResults(queryID);</Command>
   		<Command>	kbUnitQueryExecute(queryID);</Command>
   		<Command>	return (queryID);</Command>
		<Command>}</Command>
		
		<Command>void saveCameraOnline(string filename="") { // Mythic_Freak</Command>
		<Command>	trackInsert();</Command>
		<Command>	trackAddWaypoint();</Command>
		<Command>	if(filename != "") trackSave(filename);</Command>
		<Command>}</Command>

		<Command>void loadCameraOnline(string filename="") { // Mythic_Freak</Command>
		<Command>	if(filename != "") trackLoad(filename);</Command>
		<Command>	trackPlay(1, -1);</Command>
		<Command>}</Command>
		
		<!-- Not very accurate, for elevation is unpredictable -->
		<Command>void zoomToPoint(vector point = cInvalidVector) { // nottud</Command>
		<Command>	trCameraCut(point, vector(0.0,0.5,0.0), vector(0.7,0.0,0.7), vector(0.7,0.0,-0.7));</Command>
		<Command>}</Command>
		
		<Command>void clickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("clickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiSelectionButtonDown();</Command>
		<Command>	uiSelectionButtonUp();</Command>
		<Command>	loadCameraOnline("clickatpoint");</Command>
		<Command>}</Command>

		<Command>void shiftClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("sclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiAddSelectionButtonDown();</Command>
		<Command>	uiToggleSelectionButton();</Command>
		<Command>	loadCameraOnline("sclickatpoint");</Command>
		<Command>}</Command>

		<Command>void doubleClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("dclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiDoubleClickSelect(0);</Command>
		<Command>	loadCameraOnline("dclickatpoint");</Command>
		<Command>}</Command>

		<Command>void shiftDoubleClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("sdclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiDoubleClickSelect(1);</Command>
		<Command>	loadCameraOnline("sdclickatpoint");</Command>
		<Command>}</Command>
		
		<Command>void controlDoubleClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("cdclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiDoubleClickSelect(0, true);</Command>
		<Command>	loadCameraOnline("cdclickatpoint");</Command>
		<Command>}</Command>
		
		<Command>void controlShiftDoubleClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("csdclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiDoubleClickSelect(1, true);</Command>
		<Command>	loadCameraOnline("csdclickatpoint");</Command>
		<Command>}</Command>

		<Command>void rightClickAtPoint(vector point = cInvalidVector) { // Mythic_Freak</Command>
		<Command>	saveCameraOnline("rclickatpoint");</Command>
		<Command>	zoomToPoint(point);</Command>
		<Command>	uiWorkAtPointer();</Command>
		<Command>	loadCameraOnline("rclickatpoint");</Command>
		<Command>}</Command>
		
		<Command>rule IfyouarereadingthisthenjustsoyouknowIammuchmuchbetterthanyouwilleverbe</Command>
		<Command>   inactive</Command>
		<Command>   highFrequency</Command>
		<Command>{</Command>
		<Command>   if(true) {</Command>
		<Command>      xsDisableSelf();</Command>
	</Effect>

</Effects>
</trigger>